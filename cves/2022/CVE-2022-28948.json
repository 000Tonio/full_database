{"Modified":"2022-10-28T19:06:00","Published":"2022-05-19T20:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":5,"cvss-time":"2022-10-28T19:06:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:N/A:P","cwe":"CWE-502","id":"CVE-2022-28948","impact":{"availability":"PARTIAL","confidentiality":"NONE","integrity":"NONE"},"last-modified":"2022-10-28T19:06:00","references":["https://github.com/go-yaml/yaml/issues/666","https://security.netapp.com/advisory/ntap-20220923-0006/"],"summary":"An issue in the Unmarshal function in Go-Yaml v3 causes the program to crash when attempting to deserialize invalid input.","vulnerable_configuration":[{"id":"cpe:2.3:a:yaml_project:yaml:3.0.0:*:*:*:*:go:*:*","title":"cpe:2.3:a:yaml_project:yaml:3.0.0:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:netapp:astra_trident:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:netapp:astra_trident:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:yaml_project:yaml:3.0.0:*:*:*:*:go:*:*","cpe:2.3:a:netapp:astra_trident:-:*:*:*:*:*:*:*"]}