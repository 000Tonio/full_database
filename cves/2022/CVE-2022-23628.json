{"Modified":"2022-02-17T02:37:00","Published":"2022-02-09T22:15:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"security-advisories@github.com","capec":[{"id":"128","name":"Integer Attacks","prerequisites":"The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use. The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.","related_weakness":["682"],"solutions":"","summary":"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats."},{"id":"129","name":"Pointer Manipulation","prerequisites":"The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.","related_weakness":["682","822","823"],"solutions":"","summary":"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks."}],"cvss":4.3,"cvss-time":"2022-02-17T02:37:00","cvss-vector":"AV:N/AC:M/Au:N/C:N/I:P/A:N","cwe":"CWE-682","id":"CVE-2022-23628","impact":{"availability":"NONE","confidentiality":"NONE","integrity":"PARTIAL"},"last-modified":"2022-02-17T02:37:00","references":["https://github.com/open-policy-agent/opa/pull/3851","https://github.com/open-policy-agent/opa/security/advisories/GHSA-hcw3-j74m-qc58","https://github.com/open-policy-agent/opa/commit/bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717","https://github.com/open-policy-agent/opa/commit/932e4ffc37a590ace79e9b75ca4340288c220239"],"summary":"OPA is an open source, general-purpose policy engine. Under certain conditions, pretty-printing an abstract syntax tree (AST) that contains synthetic nodes could change the logic of some statements by reordering array literals. Example of policies impacted are those that parse and compare web paths. **All of these** three conditions have to be met to create an adverse effect: 1. An AST of Rego had to be **created programmatically** such that it ends up containing terms without a location (such as wildcard variables). 2. The AST had to be **pretty-printed** using the `github.com/open-policy-agent/opa/format` package. 3. The result of the pretty-printing had to be **parsed and evaluated again** via an OPA instance using the bundles, or the Golang packages. If any of these three conditions are not met, you are not affected. Notably, all three would be true if using **optimized bundles**, i.e. bundles created with `opa build -O=1` or higher. In that case, the optimizer would fulfil condition (1.), the result of that would be pretty-printed when writing the bundle to disk, fulfilling (2.). When the bundle was then used, we'd satisfy (3.). As a workaround users may disable optimization when creating bundles.","vulnerable_configuration":[{"id":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.33.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.33.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.35.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.35.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.36.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.36.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.36.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:openpolicyagent:open_policy_agent:0.36.1:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:openpolicyagent:open_policy_agent:0.33.1:*:*:*:*:*:*:*","cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.0:*:*:*:*:*:*:*","cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.1:*:*:*:*:*:*:*","cpe:2.3:a:openpolicyagent:open_policy_agent:0.34.2:*:*:*:*:*:*:*","cpe:2.3:a:openpolicyagent:open_policy_agent:0.35.0:*:*:*:*:*:*:*","cpe:2.3:a:openpolicyagent:open_policy_agent:0.36.0:*:*:*:*:*:*:*","cpe:2.3:a:openpolicyagent:open_policy_agent:0.36.1:*:*:*:*:*:*:*"]}