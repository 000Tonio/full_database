{"Modified":"2023-02-12T22:15:00","Published":"2022-09-01T21:15:00","access":{},"assigner":"secalert@redhat.com","capec":[{"id":"170","name":"Web Application Fingerprinting","prerequisites":"Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.","related_weakness":["497"],"solutions":"Implementation: Obfuscate server fields of HTTP response. Implementation: Hide inner ordering of HTTP response header. Implementation: Customizing HTTP error codes such as 404 or 500. Implementation: Hide URL file extension. Implementation: Hide HTTP response header software information filed. Implementation: Hide cookie's software information filed. Implementation: Appropriately deal with error messages. Implementation: Obfuscate database type in Database API's error message.","summary":"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks."}],"cvss":null,"cwe":"CWE-497","id":"CVE-2022-2403","impact":{},"last-modified":"2023-02-12T22:15:00","references":["https://bugzilla.redhat.com/show_bug.cgi?id=2101959","https://access.redhat.com/security/cve/CVE-2022-2403"],"summary":"A credentials leak was found in the OpenShift Container Platform. The private key for the external cluster certificate was stored incorrectly in the oauth-serving-cert ConfigMaps, and accessible to any authenticated OpenShift user or service-account. A malicious user could exploit this flaw by reading the oauth-serving-cert ConfigMap in the openshift-config-managed namespace, compromising any web traffic secured using that certificate.","vulnerable_configuration":[{"id":"cpe:2.3:a:redhat:openshift:4.9:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:openshift:4.9:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:redhat:openshift:4.9:*:*:*:*:*:*:*"]}