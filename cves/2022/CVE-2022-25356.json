{"Modified":"2022-04-12T19:16:00","Published":"2022-04-05T02:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"83","name":"XPath Injection","prerequisites":"XPath queries used to retrieve information stored in XML documents User-controllable input not properly sanitized before being used as part of XPath queries","related_weakness":["20","707","713","74","91"],"solutions":"Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions. Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.","summary":"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database."},{"id":"250","name":"XML Injection","prerequisites":"XML queries used to process user input and retrieve information stored in XML documents User-controllable input not properly sanitized","related_weakness":["20","707","713","74","91"],"solutions":"Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.","summary":"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information."}],"cvss":5,"cvss-time":"2022-04-12T19:16:00","cvss-vector":"AV:N/AC:L/Au:N/C:P/I:N/A:N","cwe":"CWE-91","id":"CVE-2022-25356","impact":{"availability":"NONE","confidentiality":"PARTIAL","integrity":"NONE"},"last-modified":"2022-04-12T19:16:00","references":["https://www.altn.com/Products/SecurityGateway-Email-Firewall/","https://www.swascan.com/security-blog/","https://www.swascan.com/security-advisory-alt-n-security-gateway/"],"summary":"Alt-N MDaemon Security Gateway through 8.5.0 allows SecurityGateway.dll?view=login XML Injection.","vulnerable_configuration":[{"id":"cpe:2.3:a:altn:securitygateway:*:*:*:*:*:*:*:*","title":"cpe:2.3:a:altn:securitygateway:*:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:altn:securitygateway:*:*:*:*:*:*:*:*"]}