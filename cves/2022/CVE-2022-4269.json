{"Modified":"2023-02-12T22:15:00","Published":"2022-12-05T16:15:00","access":{},"assigner":"secalert@redhat.com","capec":[{"id":"25","name":"Forced Deadlock","prerequisites":"The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [R.25.3][REF-6] The target host exposes an API to the user.","related_weakness":["412","567","662","667","833"],"solutions":"Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms). For competing actions, use well-known libraries which implement synchronization.","summary":"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect."}],"cvss":null,"cwe":"CWE-833","id":"CVE-2022-4269","impact":{},"last-modified":"2023-02-12T22:15:00","references":["https://lore.kernel.org/netdev/33dc43f587ec1388ba456b4915c75f02a8aae226.1663945716.git.dcaratti%40redhat.com/"],"summary":"A flaw was found in the Linux kernel Traffic Control (TC) subsystem. Using a specific networking configuration (redirecting egress packets to ingress using TC action \"mirred\") a local unprivileged user could trigger a CPU soft lockup (ABBA deadlock) when the transport protocol in use (TCP or SCTP) does a retransmission, resulting in a denial of service condition.","vulnerable_configuration":[{"id":"cpe:2.3:o:linux:linux_kernel:4.1:rc1:*:*:*:*:*:*","title":"cpe:2.3:o:linux:linux_kernel:4.1:rc1:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:o:linux:linux_kernel:4.1:rc1:*:*:*:*:*:*"]}