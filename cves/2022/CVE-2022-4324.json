{"Modified":"2023-01-09T19:51:00","Published":"2023-01-02T22:15:00","access":{},"assigner":"contact@wpscan.com","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":null,"cwe":"CWE-502","id":"CVE-2022-4324","impact":{},"last-modified":"2023-01-09T19:51:00","references":["https://wpscan.com/vulnerability/70c39236-f7ae-49bf-a2f0-7cb9aa983e45"],"summary":"The Custom Field Template WordPress plugin before 2.5.8 unserialises the content of an imported file, which could lead to PHP object injections issues when a high privilege user import (intentionally or not) a malicious Customizer Styling file and a suitable gadget chain is present on the blog.","vulnerable_configuration":[{"id":"cpe:2.3:a:wpgogo:custom_field_template:*:*:*:*:*:wordpress:*:*","title":"cpe:2.3:a:wpgogo:custom_field_template:*:*:*:*:*:wordpress:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:wpgogo:custom_field_template:*:*:*:*:*:wordpress:*:*"]}