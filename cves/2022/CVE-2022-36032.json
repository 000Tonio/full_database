{"Modified":"2022-09-10T03:18:00","Published":"2022-09-06T19:15:00","access":{},"assigner":"security-advisories@github.com","capec":[{"id":"39","name":"Manipulating Opaque Client-based Data Tokens","prerequisites":"An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system. For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.","related_weakness":["233","285","302","315","353","384","472","539","565"],"solutions":"One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help. Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash) Make sure that all session tokens use a good source of randomness Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.","summary":"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation."},{"id":"31","name":"Accessing/Intercepting/Modifying HTTP Cookies","prerequisites":"Target server software must be a HTTP daemon that relies on cookies. The cookies must contain sensitive information. The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.","related_weakness":["113","20","302","311","315","384","472","539","565","602","642","724"],"solutions":"Design: Use input validation for cookies Design: Generate and validate MAC for cookies Implementation: Use SSL/TLS to protect cookie in transit Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.","summary":"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information."},{"id":"226","name":"Session Credential Falsification through Manipulation","prerequisites":"The targeted application must use session credentials to identify legitimate users.","related_weakness":["472","565"],"solutions":"","summary":"An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server. For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service."}],"cvss":null,"cwe":"CWE-565","id":"CVE-2022-36032","impact":{},"last-modified":"2022-09-10T03:18:00","references":["https://github.com/reactphp/http/pull/175","https://github.com/reactphp/http/security/advisories/GHSA-w3w9-vrf5-8mx8","https://github.com/reactphp/http/releases/tag/v1.7.0","https://github.com/reactphp/http/commit/663c9a3b77b71463fa7fcb76a6676ffd16979dd6"],"summary":"ReactPHP HTTP is a streaming HTTP client and server implementation for ReactPHP. In ReactPHP's HTTP server component versions starting with 0.7.0 and prior to 1.7.0, when ReactPHP is processing incoming HTTP cookie values, the cookie names are url-decoded. This may lead to cookies with prefixes like `__Host-` and `__Secure-` confused with cookies that decode to such prefix, thus leading to an attacker being able to forge cookie which is supposed to be secure. This issue is fixed in ReactPHP HTTP version 1.7.0. As a workaround, Infrastructure or DevOps can place a reverse proxy in front of the ReactPHP HTTP server to filter out any unexpected `Cookie` request headers.","vulnerable_configuration":[{"id":"cpe:2.3:a:reactphp:http:0.7.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.7.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.7.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.7.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.7.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.7.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.7.3:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.7.3:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.7.4:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.7.4:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.8.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.8.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.8.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.8.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.8.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.8.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.8.3:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.8.3:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.8.4:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.8.4:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.8.5:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.8.5:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.8.6:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.8.6:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:0.8.7:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:0.8.7:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:1.0.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:1.0.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:1.1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:1.1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:1.2.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:1.2.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:1.3.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:1.3.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:1.4.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:1.4.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:1.5.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:1.5.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:reactphp:http:1.6.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:reactphp:http:1.6.0:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:reactphp:http:0.7.0:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.7.1:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.7.2:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.7.3:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.7.4:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.8.0:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.8.1:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.8.2:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.8.3:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.8.4:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.8.5:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.8.6:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:0.8.7:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:1.0.0:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:1.1.0:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:1.2.0:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:1.3.0:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:1.4.0:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:1.5.0:*:*:*:*:*:*:*","cpe:2.3:a:reactphp:http:1.6.0:*:*:*:*:*:*:*"]}