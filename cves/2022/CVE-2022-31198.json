{"Modified":"2022-12-06T19:51:00","Published":"2022-08-01T21:15:00","access":{},"assigner":"security-advisories@github.com","capec":[{"id":"128","name":"Integer Attacks","prerequisites":"The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use. The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.","related_weakness":["682"],"solutions":"","summary":"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats."},{"id":"129","name":"Pointer Manipulation","prerequisites":"The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.","related_weakness":["682","822","823"],"solutions":"","summary":"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks."}],"cvss":null,"cwe":"CWE-682","id":"CVE-2022-31198","impact":{},"last-modified":"2022-12-06T19:51:00","references":["https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3561","https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-xrc4-737v-9q75"],"summary":"OpenZeppelin Contracts is a library for secure smart contract development. This issue concerns instances of Governor that use the module `GovernorVotesQuorumFraction`, a mechanism that determines quorum requirements as a percentage of the voting token's total supply. In affected instances, when a proposal is passed to lower the quorum requirements, past proposals may become executable if they had been defeated only due to lack of quorum, and the number of votes it received meets the new quorum requirement. Analysis of instances on chain found only one proposal that met this condition, and we are actively monitoring for new occurrences of this particular issue. This issue has been patched in v4.7.2. Users are advised to upgrade. Users unable to upgrade should consider avoiding lowering quorum requirements if a past proposal was defeated for lack of quorum.","vulnerable_configuration":[{"id":"cpe:2.3:a:openzeppelin:contracts:4.3.0:-:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.3.0:-:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.3.0:rc0:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.3.0:rc0:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.3.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.3.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.3.2:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.3.2:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.3.3:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.3.3:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.4.0:rc0:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.4.0:rc0:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.4.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.4.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.4.2:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.4.2:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.5.0:rc0:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.5.0:rc0:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.6.0:-:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.6.0:-:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.6.0:rc0:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.6.0:rc0:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.7.0:rc0:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.7.0:rc0:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts:4.7.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts:4.7.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:openzeppelin:contracts_upgradeable:*:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:openzeppelin:contracts_upgradeable:*:*:*:*:*:node.js:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:openzeppelin:contracts:4.3.0:-:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.3.0:rc0:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.3.1:*:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.3.2:*:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.3.3:*:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.4.0:rc0:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.4.1:*:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.4.2:*:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.5.0:rc0:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.6.0:-:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.6.0:rc0:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.7.0:rc0:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts:4.7.1:*:*:*:*:node.js:*:*","cpe:2.3:a:openzeppelin:contracts_upgradeable:*:*:*:*:*:node.js:*:*"]}