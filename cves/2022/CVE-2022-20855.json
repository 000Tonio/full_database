{"Modified":"2022-10-27T15:47:00","Published":"2022-09-30T19:15:00","access":{},"assigner":"psirt@cisco.com","capec":[{"id":"88","name":"OS Command Injection","prerequisites":"User controllable input used as part of commands to the underlying operating system.","related_weakness":["20","697","713","78","88"],"solutions":"Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable. Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.","summary":"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system."},{"id":"6","name":"Argument Injection","prerequisites":"Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions. Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.","related_weakness":["146","184","185","697","713","74","78"],"solutions":"Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process. Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred. Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.","summary":"An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods."},{"id":"15","name":"Command Delimiters","prerequisites":"Software's input validation or filtering must not detect and block presence of additional malicious command.","related_weakness":["138","140","146","154","157","184","185","697","713","77","78","93"],"solutions":"Design: Perform whitelist validation against a positive specification for command length, type, and parameters. Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account Implementation: Perform input validation for all remote content. Implementation: Use type conversions such as JDBC prepared statements.","summary":"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."},{"id":"108","name":"Command Line Execution through SQL Injection","prerequisites":"The application does not properly validate data before storing in the database Backend application implicitly trusts the data stored in the database Malicious data is used on the backend as a command line argument","related_weakness":["114","20","74","78","89"],"solutions":"Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).","summary":"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."},{"id":"43","name":"Exploiting Multiple Input Interpretation Layers","prerequisites":"User input is used to construct a command to be executed on the target system or as part of the file name. Multiple parser passes are performed on the data supplied by the user.","related_weakness":["171","179","181","183","184","20","697","707","74","77","78"],"solutions":"An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it. Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.","summary":"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."}],"cvss":null,"cwe":"CWE-78","id":"CVE-2022-20855","impact":{},"last-modified":"2022-10-27T15:47:00","references":["https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-ewc-priv-esc-nderYLtK"],"summary":"A vulnerability in the self-healing functionality of Cisco IOS XE Software for Embedded Wireless Controllers on Catalyst Access Points could allow an authenticated, local attacker to escape the restricted controller shell and execute arbitrary commands on the underlying operating system of the access point. This vulnerability is due to improper checks throughout the restart of certain system processes. An attacker could exploit this vulnerability by logging on to an affected device and executing certain CLI commands. A successful exploit could allow the attacker to execute arbitrary commands on the underlying OS as root. To successfully exploit this vulnerability, an attacker would need valid credentials for a privilege level 15 user of the wireless controller.","vulnerable_configuration":[{"id":"cpe:2.3:o:cisco:ios_xe:17.6.1:*:*:*:*:*:*:*","title":"cpe:2.3:o:cisco:ios_xe:17.6.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9800-l:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9800-l:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9800-l-c:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9800-l-c:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9800-l-f:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9800-l-f:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9800-40:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9800-40:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9800-80:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9800-80:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9800-cl:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9800-cl:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9130_ap:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9130_ap:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9120_ap:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9120_ap:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9117_ap:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9117_ap:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9105:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9105:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9800:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9800:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9105axi:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9105axi:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9105axw:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9105axw:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9115:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9115:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9115_ap:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9115_ap:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9115axe:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9115axe:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9115axi:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9115axi:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9117:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9117:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9117axi:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9117axi:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9120:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9120:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9120axe:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9120axe:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9120axi:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9120axi:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9120axp:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9120axp:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9124axd:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9124axd:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9124axi:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9124axi:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9130:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9130:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9130axe:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9130axe:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9124:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9124:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:cisco:catalyst_9130axi:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:cisco:catalyst_9130axi:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:o:cisco:ios_xe:17.6.1:*:*:*:*:*:*:*"]}