{"Modified":"2023-02-12T22:15:00","Published":"2022-04-11T20:15:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"secalert@redhat.com","capec":[{"id":"105","name":"HTTP Request Splitting","prerequisites":"User-manipulateable HTTP Request headers are processed by the web server","related_weakness":["436","444"],"solutions":"Make sure to install the latest vendor security patches available for the web server. If possible, make use of SSL. Install a web application firewall that has been secured against HTTP Request Splitting Use web servers that employ a tight HTTP parsing process","summary":"HTTP Request Splitting (also known as HTTP Request Smuggling) is an attack pattern where an attacker attempts to insert additional HTTP requests in the body of the original (enveloping) HTTP request in such a way that the browser interprets it as one request but the web server interprets it as two. There are several ways to perform HTTP request splitting attacks. One way is to include double Content-Length headers in the request to exploit the fact that the devices parsing the request may each use a different header. Another way is to submit an HTTP request with a \"Transfer Encoding: chunked\" in the request header set with setRequestHeader to allow a payload in the HTTP Request that can be considered as another HTTP Request by a subsequent parsing entity. A third way is to use the \"Double CR in an HTTP header\" technique. There are also a few less general techniques targeting specific parsing vulnerabilities in certain web servers."},{"id":"33","name":"HTTP Request Smuggling","prerequisites":"An additional HTTP entity such as an application firewall or a web caching proxy between the attacker and the second entity such as a web server Differences in the way the two HTTP entities parse HTTP requests","related_weakness":["436","444","707"],"solutions":"HTTP Request Smuggling is usually targeted at web servers. Therefore, in such cases, careful analysis of the entities must occur during system design prior to deployment. If there are known differences in the way the entities parse HTTP requests, the choice of entities needs consideration. Employing an application firewall can help. However, there are instances of the firewalls being susceptible to HTTP Request Smuggling as well.","summary":"HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it."}],"cvss":4.3,"cvss-time":"2023-02-12T22:15:00","cvss-vector":"AV:N/AC:M/Au:N/C:N/I:P/A:N","cwe":"CWE-444","id":"CVE-2022-0552","impact":{"availability":"NONE","confidentiality":"NONE","integrity":"PARTIAL"},"last-modified":"2023-02-12T22:15:00","references":["https://github.com/openshift/origin-aggregated-logging/commit/d6b72d6c32e7c06b65324294d10406546734004d","https://bugzilla.redhat.com/show_bug.cgi?id=2052539","https://access.redhat.com/security/cve/CVE-2021-21409"],"summary":"A flaw was found in the original fix for the netty-codec-http CVE-2021-21409, where the OpenShift Logging openshift-logging/elasticsearch6-rhel8 container was incomplete. The vulnerable netty-codec-http maven package was not removed from the image content. This flaw affects origin-aggregated-logging versions 3.11.","vulnerable_configuration":[{"id":"cpe:2.3:a:redhat:origin-aggregated-logging:3.11:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:origin-aggregated-logging:3.11:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:redhat:origin-aggregated-logging:3.11:*:*:*:*:*:*:*"]}