{"Modified":"2023-02-11T17:42:00","Published":"2022-12-01T11:15:00","access":{},"assigner":"security@google.com","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":null,"cwe":"CWE-502","id":"CVE-2022-1471","impact":{},"last-modified":"2023-02-11T17:42:00","references":["https://github.com/google/security-research/security/advisories/GHSA-mjmj-j48q-9wg2","https://github.com/mbechler/marshalsec","https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf?raw=true","https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64581479"],"summary":"SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization. Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization.","vulnerable_configuration":[{"id":"cpe:2.3:a:snakeyaml_project:snakeyaml:1.30:*:*:*:*:*:*:*","title":"cpe:2.3:a:snakeyaml_project:snakeyaml:1.30:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:snakeyaml_project:snakeyaml:1.30:*:*:*:*:*:*:*"]}