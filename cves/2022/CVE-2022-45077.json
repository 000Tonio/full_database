{"Modified":"2022-11-18T19:35:00","Published":"2022-11-17T23:15:00","access":{},"assigner":"audit@patchstack.com","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":null,"cwe":"CWE-502","id":"CVE-2022-45077","impact":{},"last-modified":"2022-11-18T19:35:00","references":["https://patchstack.com/database/vulnerability/betheme/wordpress-betheme-theme-26-5-1-4-auth-php-object-injection-vulnerability?_s_id=cve","https://themeforest.net/item/betheme-responsive-multipurpose-wordpress-theme/7758048"],"summary":"Auth. (subscriber+) PHP Object Injection vulnerability in Betheme theme <= 26.5.1.4 on WordPress.","vulnerable_configuration":[{"id":"cpe:2.3:a:muffingroup:betheme:*:*:*:*:*:wordpress:*:*","title":"cpe:2.3:a:muffingroup:betheme:*:*:*:*:*:wordpress:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:muffingroup:betheme:*:*:*:*:*:wordpress:*:*"]}