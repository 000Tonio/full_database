{"Modified":"2022-07-21T22:24:00","Published":"2022-07-17T23:15:00","access":{},"assigner":"cve@mitre.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":null,"cwe":"CWE-502","id":"CVE-2022-30981","impact":{},"last-modified":"2022-07-21T22:24:00","references":["https://sec-consult.com/vulnerability-lab/advisory/multiple-vulnerabilies-in-gentics-cms/"],"summary":"An issue was discovered in Gentics CMS before 5.43.1. By uploading a malicious ZIP file, an attacker is able to deserialize arbitrary data and hence can potentially achieve Java code execution.","vulnerable_configuration":[{"id":"cpe:2.3:a:gentics:gentics_cms:5.43.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:gentics:gentics_cms:5.43.0:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:gentics:gentics_cms:5.43.0:*:*:*:*:*:*:*"]}