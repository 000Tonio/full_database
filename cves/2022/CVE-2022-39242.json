{"Modified":"2022-09-29T14:54:00","Published":"2022-09-24T02:15:00","access":{},"assigner":"security-advisories@github.com","capec":[{"id":"128","name":"Integer Attacks","prerequisites":"The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use. The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.","related_weakness":["682"],"solutions":"","summary":"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats."},{"id":"129","name":"Pointer Manipulation","prerequisites":"The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.","related_weakness":["682","822","823"],"solutions":"","summary":"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks."}],"cvss":null,"cwe":"CWE-682","id":"CVE-2022-39242","impact":{},"last-modified":"2022-09-29T14:54:00","references":["https://github.com/paritytech/frontier/pull/851","https://github.com/paritytech/frontier/security/advisories/GHSA-v57h-6hmh-g2p4"],"summary":"Frontier is an Ethereum compatibility layer for Substrate. Prior to commit d3beddc6911a559a3ecc9b3f08e153dbe37a8658, the worst case weight was always accounted as the block weight for all cases. In case of large EVM gas refunds, this can lead to block spamming attacks -- the adversary can construct blocks with transactions that have large amount of refunds or unused gases with reverts, and as a result inflate up the chain gas prices. The impact of this issue is limited in that the spamming attack would still be costly for any adversary, and it has no ability to alter any chain state. This issue has been patched in commit d3beddc6911a559a3ecc9b3f08e153dbe37a8658. There are no known workarounds.","vulnerable_configuration":[{"id":"cpe:2.3:a:parity:frontier:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:parity:frontier:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:parity:frontier:2021-09-03:*:*:*:*:*:*:*","title":"cpe:2.3:a:parity:frontier:2021-09-03:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:parity:frontier:2021-10-13:*:*:*:*:*:*:*","title":"cpe:2.3:a:parity:frontier:2021-10-13:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:parity:frontier:-:*:*:*:*:*:*:*","cpe:2.3:a:parity:frontier:2021-09-03:*:*:*:*:*:*:*","cpe:2.3:a:parity:frontier:2021-10-13:*:*:*:*:*:*:*"]}