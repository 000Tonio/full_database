{"Modified":"2017-01-10T16:21:00","Published":"2017-01-06T21:59:00","access":{"authentication":"NONE","complexity":"LOW","vector":"LOCAL"},"assigner":"cve@mitre.org","capec":[{"id":"35","name":"Leverage Executable Code in Non-Executable Files","prerequisites":"The attacker must have the ability to modify non-executable files consumed by the target software.","related_weakness":["264","270","272","275","282","59","714","94","95","96","97"],"solutions":"Design: Enforce principle of least privilege Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files. Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.","summary":"An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high."},{"id":"17","name":"Using Malicious Files","prerequisites":"System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.","related_weakness":["264","270","272","275","282","285","59","693","732"],"solutions":"Design: Enforce principle of least privilege Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.","summary":"An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface."}],"cvss":7.2,"cvss-time":"2017-01-10T16:21:00","cvss-vector":"AV:L/AC:L/Au:N/C:C/I:C/A:C","cwe":"CWE-275","id":"CVE-2016-4288","impact":{"availability":"COMPLETE","confidentiality":"COMPLETE","integrity":"COMPLETE"},"last-modified":"2017-01-10T16:21:00","references":["http://www.securityfocus.com/bid/92426","http://www.talosintelligence.com/reports/TALOS-2016-0124/"],"refmap":{"misc":["http://www.talosintelligence.com/reports/TALOS-2016-0124/"]},"summary":"A local privilege escalation vulnerability exists in BlueStacks App Player. The BlueStacks App Player installer creates a registry key with weak permissions that allows users to execute arbitrary programs with SYSTEM privileges.","vulnerable_configuration":[{"id":"cpe:2.3:a:bluestacks:bluestacks:2.1.3.5650:*:*:*:*:*:*:*","title":"cpe:2.3:a:bluestacks:bluestacks:2.1.3.5650:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:bluestacks:bluestacks:2.1.3.5650:*:*:*:*:*:*:*"]}