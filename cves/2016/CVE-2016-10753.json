{"Modified":"2019-05-29T18:38:00","Published":"2019-05-24T18:29:00","access":{"authentication":"SINGLE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":6.5,"cvss-time":"2019-05-29T18:38:00","cvss-vector":"AV:N/AC:L/Au:S/C:P/I:P/A:P","cwe":"CWE-502","id":"CVE-2016-10753","impact":{"availability":"PARTIAL","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2019-05-29T18:38:00","references":["https://blog.ripstech.com/2016/e107-sql-injection-through-object-injection/","https://demo.ripstech.com/projects/e107_2.1.2"],"refmap":{"misc":["https://blog.ripstech.com/2016/e107-sql-injection-through-object-injection/","https://demo.ripstech.com/projects/e107_2.1.2"]},"summary":"e107 2.1.2 allows PHP Object Injection with resultant SQL injection, because usersettings.php uses unserialize without an HMAC.","vulnerable_configuration":[{"id":"cpe:2.3:a:e107:e107:2.1.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:e107:e107:2.1.2:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:e107:e107:2.1.2:*:*:*:*:*:*:*"]}