{"Modified":"2017-02-01T02:59:00","Published":"2017-01-23T21:59:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"61","name":"Session Fixation","prerequisites":"Session identifiers that remain unchanged when the privilege levels change. Permissive session management mechanism that accepts random user-generated session identifiers Predictable session identifiers","related_weakness":["361","384","664","732"],"solutions":"Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice. Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes. Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.","summary":"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation."}],"cvss":5,"cvss-time":"2017-02-01T02:59:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:P/A:N","cwe":"CWE-361","id":"CVE-2016-7037","impact":{"availability":"NONE","confidentiality":"NONE","integrity":"PARTIAL"},"last-modified":"2017-02-01T02:59:00","references":["http://www.securityfocus.com/bid/95847","https://github.com/emarref/jwt/pull/20","https://github.com/emarref/jwt/releases/tag/1.0.3"],"refmap":{"bid":["95847"],"confirm":["https://github.com/emarref/jwt/pull/20","https://github.com/emarref/jwt/releases/tag/1.0.3"]},"summary":"The verify function in Encryption/Symmetric.php in Malcolm Fell jwt before 1.0.3 does not use a timing-safe function for hash comparison, which allows attackers to spoof signatures via a timing attack.","vulnerable_configuration":[{"id":"cpe:2.3:a:jwt_project:jwt:0.0.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:jwt_project:jwt:0.0.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jwt_project:jwt:0.1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:jwt_project:jwt:0.1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jwt_project:jwt:0.1.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:jwt_project:jwt:0.1.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jwt_project:jwt:1.0.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:jwt_project:jwt:1.0.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jwt_project:jwt:1.0.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:jwt_project:jwt:1.0.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jwt_project:jwt:1.0.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:jwt_project:jwt:1.0.2:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:jwt_project:jwt:0.0.1:*:*:*:*:*:*:*","cpe:2.3:a:jwt_project:jwt:0.1.0:*:*:*:*:*:*:*","cpe:2.3:a:jwt_project:jwt:0.1.1:*:*:*:*:*:*:*","cpe:2.3:a:jwt_project:jwt:1.0.0:*:*:*:*:*:*:*","cpe:2.3:a:jwt_project:jwt:1.0.1:*:*:*:*:*:*:*","cpe:2.3:a:jwt_project:jwt:1.0.2:*:*:*:*:*:*:*"]}