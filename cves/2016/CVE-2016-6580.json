{"Modified":"2017-01-27T19:42:00","Published":"2017-01-10T15:59:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[],"cvss":5,"cvss-time":"2017-01-27T19:42:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:N/A:P","cwe":"CWE-399","id":"CVE-2016-6580","impact":{"availability":"PARTIAL","confidentiality":"NONE","integrity":"NONE"},"last-modified":"2017-01-27T19:42:00","references":["http://www.securityfocus.com/bid/92311","https://python-hyper.org/priority/en/latest/security/CVE-2016-6580.html"],"refmap":{"bid":["92311"],"confirm":["https://python-hyper.org/priority/en/latest/security/CVE-2016-6580.html"]},"summary":"A HTTP/2 implementation built using any version of the Python priority library prior to version 1.2.0 could be targeted by a malicious peer by having that peer assign priority information for every possible HTTP/2 stream ID. The priority tree would happily continue to store the priority information for each stream, and would therefore allocate unbounded amounts of memory. Attempting to actually use a tree like this would also cause extremely high CPU usage to maintain the tree.","vulnerable_configuration":[{"id":"cpe:2.3:a:python:python_priority_library:1.0.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:python:python_priority_library:1.0.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:python:python_priority_library:1.1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:python:python_priority_library:1.1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:python:python_priority_library:1.1.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:python:python_priority_library:1.1.1:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:python:python_priority_library:1.0.0:*:*:*:*:*:*:*","cpe:2.3:a:python:python_priority_library:1.1.0:*:*:*:*:*:*:*","cpe:2.3:a:python:python_priority_library:1.1.1:*:*:*:*:*:*:*"]}