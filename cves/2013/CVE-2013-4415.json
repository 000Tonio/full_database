{"Modified":"2022-02-25T19:07:00","Published":"2014-02-14T15:55:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"secalert@redhat.com","capec":[{"id":"591","name":"Reflected XSS","prerequisites":"An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.","related_weakness":["79"],"solutions":"Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.","summary":"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."},{"id":"209","name":"XSS Using MIME Type Mismatch","prerequisites":"The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.","related_weakness":["20","646","79"],"solutions":"","summary":"An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."},{"id":"588","name":"DOM-Based XSS","prerequisites":"An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.","related_weakness":["20","79","83"],"solutions":"Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.","summary":"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."},{"id":"592","name":"Stored XSS","prerequisites":"An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.","related_weakness":["79"],"solutions":"Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.","summary":"This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."},{"id":"85","name":"AJAX Fingerprinting","prerequisites":"The user must allow JavaScript to execute in their browser","related_weakness":["113","116","184","20","348","692","712","79","86","96"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.","summary":"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."},{"id":"63","name":"Cross-Site Scripting (XSS)","prerequisites":"Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.","related_weakness":["20","79"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.","summary":"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."}],"cvss":4.3,"cvss-time":"2022-02-25T19:07:00","cvss-vector":"AV:N/AC:M/Au:N/C:N/I:P/A:N","cwe":"CWE-79","id":"CVE-2013-4415","impact":{"availability":"NONE","confidentiality":"NONE","integrity":"PARTIAL"},"last-modified":"2022-02-25T19:07:00","redhat":{"advisories":[{"rhsa":{"id":"RHSA-2014:0148"}}],"rpms":["satellite-branding-0:5.6.0.23-1.el5sat","satellite-branding-0:5.6.0.23-1.el6sat","spacewalk-base-0:2.0.3-19.el5sat","spacewalk-base-0:2.0.3-19.el6sat","spacewalk-base-minimal-0:2.0.3-19.el5sat","spacewalk-base-minimal-0:2.0.3-19.el6sat","spacewalk-base-minimal-config-0:2.0.3-19.el5sat","spacewalk-base-minimal-config-0:2.0.3-19.el6sat","spacewalk-dobby-0:2.0.3-19.el5sat","spacewalk-dobby-0:2.0.3-19.el6sat","spacewalk-grail-0:2.0.3-19.el5sat","spacewalk-grail-0:2.0.3-19.el6sat","spacewalk-html-0:2.0.3-19.el5sat","spacewalk-html-0:2.0.3-19.el6sat","spacewalk-java-0:2.0.2-58.el5sat","spacewalk-java-0:2.0.2-58.el6sat","spacewalk-java-config-0:2.0.2-58.el5sat","spacewalk-java-config-0:2.0.2-58.el6sat","spacewalk-java-lib-0:2.0.2-58.el5sat","spacewalk-java-lib-0:2.0.2-58.el6sat","spacewalk-java-oracle-0:2.0.2-58.el5sat","spacewalk-java-oracle-0:2.0.2-58.el6sat","spacewalk-java-postgresql-0:2.0.2-58.el5sat","spacewalk-java-postgresql-0:2.0.2-58.el6sat","spacewalk-pxt-0:2.0.3-19.el5sat","spacewalk-pxt-0:2.0.3-19.el6sat","spacewalk-sniglets-0:2.0.3-19.el5sat","spacewalk-sniglets-0:2.0.3-19.el6sat","spacewalk-taskomatic-0:2.0.2-58.el5sat","spacewalk-taskomatic-0:2.0.2-58.el6sat"]},"references":["https://bugzilla.redhat.com/show_bug.cgi?id=979452","http://rhn.redhat.com/errata/RHSA-2014-0148.html","http://secunia.com/advisories/56952","https://www.suse.com/support/update/announcement/2014/suse-su-20140222-1.html","https://git.fedorahosted.org/cgit/spacewalk.git/commit/?id=18c70164285cae0660fa3ac55c6656bb19b3b13f"],"refmap":{"confirm":["https://bugzilla.redhat.com/show_bug.cgi?id=979452","https://git.fedorahosted.org/cgit/spacewalk.git/commit/?id=18c70164285cae0660fa3ac55c6656bb19b3b13f"],"secunia":["56952"],"suse":["SUSE-SU-2014:0222"]},"summary":"Multiple cross-site scripting (XSS) vulnerabilities in Spacewalk and Red Hat Network (RHN) Satellite 5.6 allow remote attackers to inject arbitrary web script or HTML via the (1) whereCriteria variable in a software channels search; (2) end_year, (3) start_hour, (4) end_am_pm, (5) end_day, (6) end_hour, (7) end_minute, (8) end_month, (9) end_year, (10) optionScanDateSearch, (11) result_filter, (12) search_string, (13) show_as, (14) start_am_pm, (15) start_day, (16) start_hour, (17) start_minute, (18) start_month, (19) start_year, or (20) whereToSearch variable in an scap audit results search; (21) end_minute, (22) end_month, (23) end_year, (24) errata_type_bug, (25) errata_type_enhancement, (26) errata_type_security, (27) fineGrained, (28) list_1892635924_sortdir, (29) optionIssueDateSearch, (30) start_am_pm, (31) start_day, (32) start_hour, (33) start_minute, (34) start_month, (35) start_year, or (36) view_mode variable in an errata search; or (37) fineGrained variable in a systems search, related to PAGE_SIZE_LABEL_SELECTED.","vulnerable_configuration":[{"id":"cpe:2.3:a:redhat:satellite:5.6:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:satellite:5.6:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:redhat:satellite_5_managed_db:5.6:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:satellite_5_managed_db:5.6:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:redhat:spacewalk-java:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:spacewalk-java:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:redhat:spacewalk-java:1.2.39:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:spacewalk-java:1.2.39:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:redhat:spacewalk-java:1.7.54:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:spacewalk-java:1.7.54:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:redhat:spacewalk-web:*:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:spacewalk-web:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:suse:manager:1.7:*:*:*:*:*:*:*","title":"cpe:2.3:a:suse:manager:1.7:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:redhat:satellite:5.6:*:*:*:*:*:*:*","cpe:2.3:a:redhat:satellite_5_managed_db:5.6:*:*:*:*:*:*:*","cpe:2.3:a:redhat:spacewalk-java:-:*:*:*:*:*:*:*","cpe:2.3:a:redhat:spacewalk-java:1.2.39:*:*:*:*:*:*:*","cpe:2.3:a:redhat:spacewalk-java:1.7.54:*:*:*:*:*:*:*","cpe:2.3:a:redhat:spacewalk-web:*:*:*:*:*:*:*:*","cpe:2.3:a:suse:manager:1.7:*:*:*:*:*:*:*"]}