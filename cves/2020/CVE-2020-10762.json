{"Modified":"2020-12-02T21:18:00","Published":"2020-11-24T17:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"LOCAL"},"assigner":"cve@mitre.org","capec":[{"id":"215","name":"Fuzzing and observing application log data/errors for application mapping","prerequisites":"The target application must fail to sanitize incoming messages adequately before processing.","related_weakness":["209","532"],"solutions":"Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally. Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion. Implementation: Obfuscate server fields of HTTP response. Implementation: Hide inner ordering of HTTP response header. Implementation: Customizing HTTP error codes such as 404 or 500. Implementation: Hide HTTP response header software information filed. Implementation: Hide cookie's software information filed. Implementation: Obfuscate database type in Database API's error message.","summary":"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information."}],"cvss":2.1,"cvss-time":"2020-12-02T21:18:00","cvss-vector":"AV:L/AC:L/Au:N/C:P/I:N/A:N","cwe":"CWE-532","id":"CVE-2020-10762","impact":{"availability":"NONE","confidentiality":"PARTIAL","integrity":"NONE"},"last-modified":"2020-12-02T21:18:00","redhat":{"rpms":["gluster-block-0:0.2.1-36.2.el7rhgs","gluster-block-debuginfo-0:0.2.1-36.2.el7rhgs","heketi-0:9.0.0-9.5.el7rhgs","heketi-client-0:9.0.0-9.5.el7rhgs","libtcmu-0:1.2.0-32.2.el7rhgs","libtcmu-devel-0:1.2.0-32.2.el7rhgs","python-heketi-0:9.0.0-9.5.el7rhgs","tcmu-runner-0:1.2.0-32.2.el7rhgs","tcmu-runner-debuginfo-0:1.2.0-32.2.el7rhgs"]},"references":["https://bugzilla.redhat.com/show_bug.cgi?id=1845067","https://github.com/gluster/gluster-block/releases/tag/v0.5.1"],"refmap":{"misc":["https://bugzilla.redhat.com/show_bug.cgi?id=1845067","https://github.com/gluster/gluster-block/releases/tag/v0.5.1"]},"summary":"An information-disclosure flaw was found in the way that gluster-block before 0.5.1 logs the output from gluster-block CLI operations. This includes recording passwords to the cmd_history.log file which is world-readable. This flaw allows local users to obtain sensitive information by reading the log file. The highest threat from this vulnerability is to data confidentiality.","vulnerable_configuration":[{"id":"cpe:2.3:a:redhat:gluster-block:*:*:*:*:*:*:*:*","title":"cpe:2.3:a:redhat:gluster-block:*:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:redhat:gluster-block:*:*:*:*:*:*:*:*"]}