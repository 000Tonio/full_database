{"Modified":"2021-01-29T21:37:00","Published":"2021-01-25T10:16:00","access":{"authentication":"SINGLE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":6,"cvss-time":"2021-01-29T21:37:00","cvss-vector":"AV:N/AC:M/Au:S/C:P/I:P/A:P","cwe":"CWE-502","id":"CVE-2020-17532","impact":{"availability":"PARTIAL","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2021-01-29T21:37:00","references":["https://issues.apache.org/jira/browse/SCB-2145","https://seclists.org/oss-sec/2021/q1/60"],"summary":"When handler-router component is enabled in servicecomb-java-chassis, authenticated user may inject some data and cause arbitrary code execution. The problem happens in versions between 2.0.0 ~ 2.1.3 and fixed in Apache ServiceComb-Java-Chassis 2.1.5","vulnerable_configuration":[{"id":"cpe:2.3:a:apache:java_chassis:*:*:*:*:*:*:*:*","title":"cpe:2.3:a:apache:java_chassis:*:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:apache:java_chassis:*:*:*:*:*:*:*:*"]}