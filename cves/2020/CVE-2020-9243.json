{"Modified":"2020-08-11T17:29:00","Published":"2020-08-10T20:15:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"231","name":"XML Oversized Payloads","prerequisites":"An application uses an XML parser to perform transformation on user-controllable data. An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.","related_weakness":["112","19","20","674","770"],"solutions":"Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser. Perform validation on canonical data. Pick a robust implementation of an XML parser. Validate XML against a valid schema or DTD prior to parsing.","summary":"Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an adversary to inject data that may have an adverse effect on the XML parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the XML parser, an adversary can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to his or her advantage. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.231.1]. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends."},{"id":"230","name":"XML Nested Payloads","prerequisites":"An application uses an XML parser to perform transformation on user-controllable data. An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.","related_weakness":["112","19","20","674","770"],"solutions":"Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser. Perform validation on canonical data. Pick a robust implementation of an XML parser. Validate XML against a valid schema or DTD prior to parsing.","summary":"Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an adversary to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an adversary can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An adversary's goal is to leverage parser failure to his or her advantage. In most cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.230.1]. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends."}],"cvss":4.3,"cvss-time":"2020-08-11T17:29:00","cvss-vector":"AV:N/AC:M/Au:N/C:N/I:N/A:P","cwe":"CWE-674","id":"CVE-2020-9243","impact":{"availability":"PARTIAL","confidentiality":"NONE","integrity":"NONE"},"last-modified":"2020-08-11T17:29:00","references":["https://www.huawei.com/en/psirt/security-advisories/huawei-sa-20200805-03-smartphone-en"],"refmap":{"misc":["https://www.huawei.com/en/psirt/security-advisories/huawei-sa-20200805-03-smartphone-en"]},"summary":"HUAWEI Mate 30 with versions earlier than 10.1.0.150(C00E136R5P3) have a denial of service vulnerability. The system does not properly limit the depth of recursion, an attacker should trick the user installing and execute a malicious application. Successful exploit could cause a denial of service condition.","vulnerable_configuration":[{"id":"cpe:2.3:o:huawei:mate_30_firmware:-:*:*:*:*:*:*:*","title":"cpe:2.3:o:huawei:mate_30_firmware:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:huawei:mate_30_firmware:10.0.0.205\\(c00e201r7p2\\):*:*:*:*:*:*:*","title":"cpe:2.3:o:huawei:mate_30_firmware:10.0.0.205\\(c00e201r7p2\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:huawei:mate_30_firmware:10.1.0.126\\(c00e125r5p3\\):*:*:*:*:*:*:*","title":"cpe:2.3:o:huawei:mate_30_firmware:10.1.0.126\\(c00e125r5p3\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:huawei:mate_30:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:huawei:mate_30:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:o:huawei:mate_30_firmware:-:*:*:*:*:*:*:*","cpe:2.3:o:huawei:mate_30_firmware:10.0.0.205\\(c00e201r7p2\\):*:*:*:*:*:*:*","cpe:2.3:o:huawei:mate_30_firmware:10.1.0.126\\(c00e125r5p3\\):*:*:*:*:*:*:*"]}