{"Modified":"2022-10-14T20:56:00","Published":"2020-09-01T21:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"ics-cert@hq.dhs.gov","capec":[{"id":"133","name":"Try All Common Switches","prerequisites":"The attacker must be able to control the options or switches sent to the target.","related_weakness":["912"],"solutions":"Design: Minimize switch and option functionality to only that necessary for correct function of the command. Implementation: Remove all debug and testing options from production code.","summary":"An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is blindly attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality."},{"id":"190","name":"Reverse Engineer an Executable to Expose Assumed Hidden Functionality","prerequisites":"","related_weakness":["912"],"solutions":"","summary":"An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications."}],"cvss":10,"cvss-time":"2022-10-14T20:56:00","cvss-vector":"AV:N/AC:L/Au:N/C:C/I:C/A:C","cwe":"CWE-912","id":"CVE-2020-16204","impact":{"availability":"COMPLETE","confidentiality":"COMPLETE","integrity":"COMPLETE"},"last-modified":"2022-10-14T20:56:00","references":["https://us-cert.cisa.gov/ics/advisories/icsa-20-240-01","http://seclists.org/fulldisclosure/2020/Sep/6","http://packetstormsecurity.com/files/159064/Red-Lion-N-Tron-702-W-702M12-W-2.0.26-XSS-CSRF-Shell.html"],"refmap":{"fulldisc":["20200902 SEC Consult SA-20200902-0 :: Multiple Vulnerabilities in Red Lion N-Tron 702-W, Red Lion N-Tron 702M12-W"],"misc":["http://packetstormsecurity.com/files/159064/Red-Lion-N-Tron-702-W-702M12-W-2.0.26-XSS-CSRF-Shell.html","https://us-cert.cisa.gov/ics/advisories/icsa-20-240-01"]},"summary":"The affected product is vulnerable due to an undocumented interface found on the device, which may allow an attacker to execute commands as root on the device on the N-Tron 702-W / 702M12-W (all versions).","vulnerable_configuration":[{"id":"cpe:2.3:o:redlion:n-tron_702-w_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:redlion:n-tron_702-w_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:redlion:n-tron_702-w:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:redlion:n-tron_702-w:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:redlion:n-tron_702m12-w_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:redlion:n-tron_702m12-w_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:redlion:n-tron_702m12-w:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:redlion:n-tron_702m12-w:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:o:redlion:n-tron_702-w_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:redlion:n-tron_702m12-w_firmware:*:*:*:*:*:*:*:*"]}