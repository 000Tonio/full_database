{"Modified":"2020-12-02T15:02:00","Published":"2020-11-16T21:15:00","access":{"authentication":"SINGLE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"92","name":"Forced Integer Overflow","prerequisites":"The attacker can manipulate the value of an integer variable utilized by the target host. The target host does not do proper range checking on the variable before utilizing it. When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)","related_weakness":["120","122","128","190","196","680","697"],"solutions":"Use a language or compiler that performs automatic bounds checking. Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow. Use an abstraction library to abstract away risky APIs. Not a complete solution. Always do bound checking before consuming user input data.","summary":"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code."}],"cvss":6.5,"cvss-time":"2020-12-02T15:02:00","cvss-vector":"AV:N/AC:L/Au:S/C:P/I:P/A:P","cwe":"CWE-190","id":"CVE-2020-27484","impact":{"availability":"PARTIAL","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2020-12-02T15:02:00","references":["https://github.com/atredispartners/advisories/blob/master/ATREDIS-2020-0004.md"],"refmap":{"misc":["https://github.com/atredispartners/advisories/blob/master/ATREDIS-2020-0004.md"]},"summary":"Garmin Forerunner 235 before 8.20 is affected by: Integer Overflow. The component is: ConnectIQ TVM. The attack vector is: To exploit the vulnerability, the attacker must upload a malicious ConnectIQ application to the ConnectIQ store. The ConnectIQ program interpreter fails to check for overflow when allocating the array for the NEWA instruction. This a constrained read/write primitive across the entire MAX32630 address space. A successful exploit would allow a ConnectIQ app store application to escape and perform activities outside the restricted application execution environment.","vulnerable_configuration":[{"id":"cpe:2.3:o:garmin:forerunner_235_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:garmin:forerunner_235_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:garmin:forerunner_235:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:garmin:forerunner_235:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:o:garmin:forerunner_235_firmware:*:*:*:*:*:*:*:*"]}