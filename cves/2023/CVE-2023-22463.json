{"Modified":"2023-01-10T19:08:00","Published":"2023-01-04T16:15:00","access":{},"assigner":"security-advisories@github.com","capec":[{"id":"70","name":"Try Common or Default Usernames and Passwords","prerequisites":"The system uses one factor password based authentication.The adversary has the means to interact with the system.","related_weakness":["262","263","521","693","798"],"solutions":"Delete all default account credentials that may be put in by the product vendor. Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user. Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users. Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.","summary":"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary."},{"id":"191","name":"Read Sensitive Strings Within an Executable","prerequisites":"Access to a binary or executable such that it can be analyzed by various utilities.","related_weakness":["798"],"solutions":"","summary":"An adversary engages in activities to discover any sensitive strings are present within the compiled code of an executable, such as literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis. One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password. When analyzing an executable the adversary may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions."}],"cvss":null,"cwe":"CWE-798","id":"CVE-2023-22463","impact":{},"last-modified":"2023-01-10T19:08:00","references":["https://github.com/KubeOperator/KubePi/blob/da784f5532ea2495b92708cacb32703bff3a45a3/internal/api/v1/session/session.go#L35","https://github.com/KubeOperator/KubePi/commit/3be58b8df5bc05d2343c30371dd5fcf6a9fbbf8b","https://github.com/KubeOperator/KubePi/releases/tag/v1.6.3","https://github.com/KubeOperator/KubePi/security/advisories/GHSA-vjhf-8vqx-vqpq"],"summary":"KubePi is a k8s panel. The jwt authentication function of KubePi through version 1.6.2 uses hard-coded Jwtsigkeys, resulting in the same Jwtsigkeys for all online projects. This means that an attacker can forge any jwt token to take over the administrator account of any online project. Furthermore, they may use the administrator to take over the k8s cluster of the target enterprise. `session.go`, the use of hard-coded JwtSigKey, allows an attacker to use this value to forge jwt tokens arbitrarily. The JwtSigKey is confidential and should not be hard-coded in the code. The vulnerability has been fixed in 1.6.3. In the patch, JWT key is specified in app.yml. If the user leaves it blank, a random key will be used. There are no workarounds aside from upgrading.","vulnerable_configuration":[{"id":"cpe:2.3:a:fit2cloud:kubepi:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.0.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.0.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.0.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.0.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.1.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.1.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.1.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.1.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.2.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.2.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.2.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.2.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.2.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.2.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.3.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.3.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.4.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.4.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.4.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.4.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.4.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.4.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.5.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.5.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.5.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.5.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.5.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.5.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.5.3:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.5.3:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.6.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.6.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.6.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.6.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fit2cloud:kubepi:1.6.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:fit2cloud:kubepi:1.6.2:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:fit2cloud:kubepi:-:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.0.0:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.0.1:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.1.0:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.1.1:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.1.2:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.2.0:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.2.1:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.2.2:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.3.0:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.4.0:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.4.1:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.4.2:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.5.0:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.5.1:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.5.2:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.5.3:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.6.0:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.6.1:*:*:*:*:*:*:*","cpe:2.3:a:fit2cloud:kubepi:1.6.2:*:*:*:*:*:*:*"]}