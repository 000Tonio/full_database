{"Modified":"2023-03-24T20:38:00","Published":"2023-03-24T20:15:00","access":{},"assigner":"security-advisories@github.com","capec":[{"id":"95","name":"WSDL Scanning","prerequisites":"A client program connecting to a web service can read the WSDL to determine what functions are available on the server. The target host exposes vulnerable functions within its WSDL interface.","related_weakness":["538"],"solutions":"It is important to protect WSDL file or provide limited access to it. Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection. Ensure the WSDL does not expose functions and APIs that were not intended to be exposed. Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack. Validate the received messages against the WSDL Schema. Incomplete solution.","summary":"This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files."}],"cvss":null,"cwe":"CWE-538","id":"CVE-2023-28444","impact":{},"last-modified":"2023-03-24T20:38:00","references":["https://github.com/kyubisation/angular-server-side-configuration/releases/tag/v15.1.0","https://github.com/kyubisation/angular-server-side-configuration/security/advisories/GHSA-gwvm-vrp4-4pp5","https://github.com/kyubisation/angular-server-side-configuration/commit/d701f51260637a84ede278e248934e0437a7ff86"],"summary":"angular-server-side-configuration helps configure an angular application at runtime on the server or in a docker container via environment variables. angular-server-side-configuration detects used environment variables in TypeScript (.ts) files during build time of an Angular CLI project. The detected environment variables are written to a ngssc.json file in the output directory. During deployment of an Angular based app, the environment variables based on the variables from ngssc.json are inserted into the apps index.html (or defined index file). With version 15.0.0 the environment variable detection was widened to the entire project, relative to the angular.json file from the Angular CLI. In a monorepo setup, this could lead to environment variables intended for a backend/service to be detected and written to the ngssc.json, which would then be populated and exposed via index.html. This has NO IMPACT, in a plain Angular project that has no backend component. This vulnerability has been mitigated in version 15.1.0, by adding an option `searchPattern` which restricts the detection file range by default. As a workaround, manually edit or create ngssc.json or run script after ngssc.json generation.","vulnerable_configuration":[],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":[]}