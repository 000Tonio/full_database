{"Modified":"2023-05-10T18:15:00","Published":"2023-05-10T18:15:00","access":{},"assigner":"security-advisories@github.com","capec":[{"id":"243","name":"XSS Targeting HTML Attributes","prerequisites":"The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.","related_weakness":["83"],"solutions":"Design: Use libraries and templates that minimize unfiltered input. Implementation: Normalize, filter and white list all input including that which is not expected to have any scripting content. Implementation: The victim should configure the browser to minimize active content from untrusted sources.","summary":"An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities."},{"id":"588","name":"DOM-Based XSS","prerequisites":"An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.","related_weakness":["20","79","83"],"solutions":"Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.","summary":"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."},{"id":"244","name":"XSS Targeting URI Placeholders","prerequisites":"Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.","related_weakness":["83"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering. Implementation: Perform input validation for all remote content, including remote and user-generated content Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.","summary":"An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link."}],"cvss":null,"cwe":"CWE-83","id":"CVE-2023-32070","impact":{},"last-modified":"2023-05-10T18:15:00","references":["https://github.com/xwiki/xwiki-rendering/commit/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1","https://github.com/xwiki/xwiki-rendering/security/advisories/GHSA-6gf5-c898-7rxp","https://jira.xwiki.org/browse/XRENDERING-663"],"summary":"XWiki Platform is a generic wiki platform. Prior to version 14.6-rc-1, HTML rendering didn't check for dangerous attributes/attribute values. This allowed cross-site scripting (XSS) attacks via attributes and link URLs, e.g., supported in XWiki syntax. This has been patched in XWiki 14.6-rc-1. There are no known workarounds apart from upgrading to a fixed version.","vulnerable_configuration":[],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":[]}