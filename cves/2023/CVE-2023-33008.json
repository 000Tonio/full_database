{"Modified":"2023-07-07T12:50:00","Published":"2023-07-07T10:15:00","access":{},"assigner":"security@apache.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":null,"cwe":"CWE-502","id":"CVE-2023-33008","impact":{},"last-modified":"2023-07-07T12:50:00","references":["https://lists.apache.org/thread/qbg14djo95gfpk7o560lr8wcrzfyw43l"],"summary":"Deserialization of Untrusted Data vulnerability in Apache Software Foundation Apache Johnzon.\n\n\nA malicious attacker can craft up some JSON input that uses large numbers (numbers such asÂ 1e20000000) that Apache Johnzon will deserialize into BigDecimal and maybe use numbers too large which may result in a slow conversion (Denial of service risk). Apache Johnzon 1.2.21 mitigates this by setting a scale limit of 1000 (by default) to the BigDecimal. \n\n\nThis issue affects Apache Johnzon: through 1.2.20.\n\n","vulnerable_configuration":[],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":[]}