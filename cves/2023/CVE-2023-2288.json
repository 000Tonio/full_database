{"Modified":"2023-05-30T12:52:00","Published":"2023-05-30T08:15:00","access":{},"assigner":"contact@wpscan.com","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":null,"cwe":"CWE-502","id":"CVE-2023-2288","impact":{},"last-modified":"2023-05-30T12:52:00","references":["https://wpscan.com/vulnerability/93acb4ee-1053-48e1-8b69-c09dc3b2f302"],"summary":"The Otter WordPress plugin before 2.2.6 does not sanitize some user-controlled file paths before performing file operations on them. This leads to a PHAR deserialization vulnerability on PHP < 8.0 using the phar:// stream wrapper.","vulnerable_configuration":[],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":[]}