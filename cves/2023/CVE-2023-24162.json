{"Modified":"2023-02-07T21:48:00","Published":"2023-01-31T16:15:00","access":{},"assigner":"cve@mitre.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":null,"cwe":"CWE-502","id":"CVE-2023-24162","impact":{},"last-modified":"2023-02-07T21:48:00","references":["https://github.com/dromara/hutool/issues/2855","https://gitee.com/dromara/hutool/issues/I6AEX2"],"summary":"Deserialization vulnerability in Dromara Hutool v5.8.11 allows attacker to execute arbitrary code via the XmlUtil.readObjectFromXml parameter.","vulnerable_configuration":[{"id":"cpe:2.3:a:hutool:hutool:5.8.11:*:*:*:*:*:*:*","title":"cpe:2.3:a:hutool:hutool:5.8.11:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:hutool:hutool:5.8.11:*:*:*:*:*:*:*"]}