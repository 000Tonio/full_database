{"Modified":"2023-03-23T01:02:00","Published":"2023-03-22T21:15:00","access":{},"assigner":"security-advisories@github.com","capec":[{"id":"128","name":"Integer Attacks","prerequisites":"The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use. The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.","related_weakness":["682"],"solutions":"","summary":"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats."},{"id":"129","name":"Pointer Manipulation","prerequisites":"The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.","related_weakness":["682","822","823"],"solutions":"","summary":"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks."}],"cvss":null,"cwe":"CWE-682","id":"CVE-2023-28431","impact":{},"last-modified":"2023-03-23T01:02:00","references":["https://github.com/paritytech/frontier/pull/1017","https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134","https://github.com/paritytech/frontier/commit/5af12e94d7dfc8a0208a290643a800f55de7b219","https://github.com/paritytech/frontier/security/advisories/GHSA-fcmm-54jp-7vf6"],"summary":"Frontier is an Ethereum compatibility layer for Substrate. Frontier's `modexp` precompile uses `num-bigint` crate under the hood. In the implementation prior to pull request 1017, the cases for modulus being even and modulus being odd are treated separately. Odd modulus uses the fast Montgomery multiplication, and even modulus uses the slow plain power algorithm. This gas cost discrepancy was not accounted for in the `modexp` precompile, leading to possible denial of service attacks. No fixes for `num-bigint` are currently available, and thus this issue is fixed in the short term by raising the gas costs for even modulus, and in the long term fixing it in `num-bigint` or switching to another modexp implementation. The short-term fix for Frontier is deployed at pull request 1017. There are no known workarounds aside from applying the fix.","vulnerable_configuration":[],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":[]}