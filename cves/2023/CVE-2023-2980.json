{"Modified":"2023-05-30T16:36:00","Published":"2023-05-30T15:15:00","access":{},"assigner":"cna@vuldb.com","capec":[{"id":"10","name":"Buffer Overflow via Environment Variables","prerequisites":"The application uses environment variables. An environment variable exposed to the user is vulnerable to a buffer overflow. The vulnerable environment variable uses untrusted data. Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.","related_weakness":["118","119","120","20","302","680","697","733","74","99"],"solutions":"Do not expose environment variable to the user. Do not use untrusted data in your environment variables. Use a language or compiler that performs automatic bounds checking There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.","summary":"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables."},{"id":"75","name":"Manipulating Writeable Configuration Files","prerequisites":"Configuration files must be modifiable by the attacker","related_weakness":["346","349","353","354","713","77","99"],"solutions":"Design: Enforce principle of least privilege Design: Backup copies of all configuration files Implementation: Integrity monitoring for configuration files Implementation: Enforce audit logging on code and configuration promotion procedures. Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD","summary":"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users."},{"id":"240","name":"Resource Injection","prerequisites":"The target application allows the user to both specify the identifier used to access a system resource. Through this permission, the user gains the capability to perform actions on that resource (e.g., overwrite the file)","related_weakness":["99"],"solutions":"Ensure all input content that is delivered to client is sanitized against an acceptable content specification. Perform input validation for all content. Enforce regular patching of software.","summary":"An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource."}],"cvss":null,"cwe":"CWE-99","id":"CVE-2023-2980","impact":{},"last-modified":"2023-05-30T16:36:00","references":["https://pydio.com/en/community/releases/pydio-cells/pydio-cells-enterprise-421","https://vuldb.com/?ctiid.230212","https://vuldb.com/?id.230212"],"summary":"A vulnerability classified as critical was found in Abstrium Pydio Cells 4.2.0. This vulnerability affects unknown code of the component User Creation Handler. The manipulation leads to improper control of resource identifiers. The attack can be initiated remotely. Upgrading to version 4.2.1 is able to address this issue. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-230212.","vulnerable_configuration":[],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":[]}