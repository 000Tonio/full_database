{"Modified":"2023-06-01T17:54:00","Published":"2023-05-22T16:15:00","access":{},"assigner":"ics-cert@hq.dhs.gov","capec":[{"id":"76","name":"Manipulating Web Input to File System Calls","prerequisites":"Program must allow for user controlled variables to be applied directly to the filesystem","related_weakness":["15","22","23","264","272","285","346","348","59","715","73","74","77"],"solutions":"Design: Enforce principle of least privilege. Design: Ensure all input is validated, and does not contain file system commands Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.","summary":"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."},{"id":"203","name":"Manipulate Registry Information","prerequisites":"The targeted application must rely on values stored in a registry. The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.","related_weakness":["15"],"solutions":"Ensure proper permissions are set for Registry hives to prevent users from modifying keys. Employ a robust and layered defensive posture in order to prevent unauthorized users on your system. Employ robust identification and audit/blocking via whitelisting of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.","summary":"An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end."},{"id":"270","name":"Modification of Registry Run Keys","prerequisites":"The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.","related_weakness":["15"],"solutions":"Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.","summary":"An adversary adds a new entry to the \"run keys\" in the registry so that an application of his choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions."},{"id":"146","name":"XML Schema Poisoning","prerequisites":"Some level of access to modify the target schema. The schema used by the target application must be improperly secured against unauthorized modification and manipulation.","related_weakness":["15","472"],"solutions":"Design: Protect the schema against unauthorized modification. Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification. Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.","summary":"An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data. In addition, manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example, a float field could be changed to an int field. Finally, the adversary may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might us a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B)."},{"id":"176","name":"Configuration/Environment Manipulation","prerequisites":"The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement.","related_weakness":["15"],"solutions":"","summary":"An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack."},{"id":"69","name":"Target Programs with Elevated Privileges","prerequisites":"The targeted program runs with elevated OS privileges. The targeted program accepts input data from the user or from another program. The targeted program does not perform input validation properly. The targeted program does not fail safely. For instance when a program fails it may authorize restricted access to anyone. The targeted program has a vulnerability such as buffer overflow which may be exploited if a malicious user can inject unvalidated data. For instance a buffer overflow interrupts the program as it executes, and makes it run additional code supplied by the attacker. If the program under attack has elevated privileges to the OS, the attacker can elevate its privileges (such as having root level access). The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker. This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.","related_weakness":["15","250","264"],"solutions":"Apply the principle of least privilege. Validate all untrusted data. Apply the latest patches. Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them. Avoid revealing information about your system (e.g., version of the program) to anonymous users. Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs. If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage. Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code. Monitor traffic and resource usage and pay attention if resource exhaustion occurs. Protect your log file from unauthorized modification and log forging.","summary":"This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call."},{"id":"13","name":"Subverting Environment Variable Values","prerequisites":"An environment variable is accessible to the user. An environment variable used by the application can be tainted with user supplied data. Input data used in an environment variable is not validated properly. The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an attacker may attempt to manipulate that variable.","related_weakness":["15","20","200","285","302","353","73","74"],"solutions":"Protect environment variables against unauthorized read and write access. Protect the configuration files which contain environment variables against illegitimate read and write access. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.","summary":"The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker."},{"id":"271","name":"Schema Poisoning","prerequisites":"Some level of access to modify the target schema. The schema used by the target application must be improperly secured against unauthorized modification and manipulation.","related_weakness":["15"],"solutions":"Design: Protect the schema against unauthorized modification. Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document. Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.","summary":"An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data."},{"id":"77","name":"Manipulating User-Controlled Variables","prerequisites":"A variable consumed by the application server is exposed to the client. A variable consumed by the application server can be overwritten by the user. The application server trusts user supplied data to compute business logic. The application server does not perform proper input validation.","related_weakness":["15","285","302","473","94","96"],"solutions":"If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables. A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data. Use encapsulation when declaring your variables. This is to lower the exposure of your variables. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should be rejected by the program.","summary":"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables."}],"cvss":null,"cwe":"CWE-15","id":"CVE-2023-32349","impact":{},"last-modified":"2023-06-01T17:54:00","references":["https://www.cisa.gov/news-events/ics-advisories/icsa-23-131-08"],"summary":"\nVersion 00.07.03.4 and prior of Teltonika’s RUT router firmware contain a packet dump utility that contains proper validation for filter parameters. However, variables for validation checks are stored in an external configuration file. An authenticated attacker could use an exposed UCI configuration utility to change these variables and enable malicious parameters in the dump utility, which could result in arbitrary code execution.\n\n","vulnerable_configuration":[{"id":"cpe:2.3:o:teltonika-networks:rut200_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut200_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut200:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut200:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut240_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut240_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut240:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut240:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut241_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut241_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut241:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut241:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut300_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut300_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut300:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut300:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut360_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut360_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut360:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut360:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut901_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut901_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut901:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut901:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut950_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut950_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut950:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut950:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut951_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut951_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut951:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut951:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut955_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut955_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut955:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut955:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rut956_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rut956_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rut956:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rut956:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rutx08_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rutx08_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rutx08:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rutx08:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rutx09_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rutx09_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rutx09:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rutx09:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rutx10_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rutx10_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rutx10:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rutx10:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rutx11_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rutx11_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rutx11:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rutx11:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rutx12_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rutx12_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rutx12:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rutx12:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rutx14_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rutx14_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rutx14:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rutx14:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rutx50_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rutx50_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rutx50:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rutx50:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:teltonika-networks:rutxr1_firmware:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:teltonika-networks:rutxr1_firmware:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:teltonika-networks:rutxr1:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:teltonika-networks:rutxr1:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:o:teltonika-networks:rut200_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut240_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut241_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut300_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut360_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut901_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut950_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut951_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut955_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rut956_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rutx08_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rutx09_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rutx10_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rutx11_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rutx12_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rutx14_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rutx50_firmware:*:*:*:*:*:*:*:*","cpe:2.3:o:teltonika-networks:rutxr1_firmware:*:*:*:*:*:*:*:*"]}