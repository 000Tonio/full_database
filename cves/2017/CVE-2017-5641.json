{"Modified":"2022-04-19T16:06:00","Published":"2017-12-28T15:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"security@apache.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":7.5,"cvss-time":"2022-04-19T16:06:00","cvss-vector":"AV:N/AC:L/Au:N/C:P/I:P/A:P","cwe":"CWE-502","id":"CVE-2017-5641","impact":{"availability":"PARTIAL","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2022-04-19T16:06:00","references":["https://www.kb.cert.org/vuls/id/307983","https://issues.apache.org/jira/browse/FLEX-35290","http://mail-archives.apache.org/mod_mbox/flex-dev/201703.mbox/%3C6B86C8D0-6E36-48F5-AC81-4AB3978F6746@c-ware.de%3E","http://www.securitytracker.com/id/1038273","http://www.securityfocus.com/bid/97383","https://support.hpe.com/hpsc/doc/public/display?docLocale=en_US&docId=emr_na-hpesbhf03823en_us","https://www.zerodayinitiative.com/advisories/ZDI-22-507/","https://www.zerodayinitiative.com/advisories/ZDI-22-506/"],"refmap":{"bid":["97383"],"cert-vn":["VU#307983"],"confirm":["https://issues.apache.org/jira/browse/FLEX-35290","https://support.hpe.com/hpsc/doc/public/display?docLocale=en_US&docId=emr_na-hpesbhf03823en_us"],"mlist":["[flex-dev] 20170327 [VOTE] Release Apache Flex BlazeDS 4.7.3"],"sectrack":["1038273"]},"summary":"Previous versions of Apache Flex BlazeDS (4.7.2 and earlier) did not restrict which types were allowed for AMF(X) object deserialization by default. During the deserialization process code is executed that for several known types has undesired side-effects. Other, unknown types may also exhibit such behaviors. One vector in the Java standard library exists that allows an attacker to trigger possibly further exploitable Java deserialization of untrusted data. Other known vectors in third party libraries can be used to trigger remote code execution.","vulnerable_configuration":[{"id":"cpe:2.3:a:apache:flex_blazeds:4.7.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:apache:flex_blazeds:4.7.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:hp:xp_command_view_advanced_edition:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:hp:xp_command_view_advanced_edition:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:apache:flex_blazeds:4.7.2:*:*:*:*:*:*:*","cpe:2.3:a:hp:xp_command_view_advanced_edition:-:*:*:*:*:*:*:*"]}