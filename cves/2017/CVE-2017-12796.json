{"Modified":"2017-11-21T16:26:00","Published":"2017-10-23T04:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":10,"cvss-time":"2017-11-21T16:26:00","cvss-vector":"AV:N/AC:L/Au:N/C:C/I:C/A:C","cwe":"CWE-502","id":"CVE-2017-12796","impact":{"availability":"COMPLETE","confidentiality":"COMPLETE","integrity":"COMPLETE"},"last-modified":"2017-11-21T16:26:00","references":["https://isears.github.io/jekyll/update/2017/10/21/openmrs-rce.html","https://talk.openmrs.org/t/critical-security-advisory-2017-09-12/13291","https://wiki.openmrs.org/display/RES/Release+Notes+2.6.1"],"refmap":{"misc":["https://isears.github.io/jekyll/update/2017/10/21/openmrs-rce.html","https://talk.openmrs.org/t/critical-security-advisory-2017-09-12/13291","https://wiki.openmrs.org/display/RES/Release+Notes+2.6.1"]},"summary":"The Reporting Compatibility Add On before 2.0.4 for OpenMRS, as distributed in OpenMRS Reference Application before 2.6.1, does not authenticate users when deserializing XML input into ReportSchema objects. The result is that remote unauthenticated users are able to execute operating system commands by crafting malicious XML payloads, as demonstrated by a single admin/reports/reportSchemaXml.form request.","vulnerable_configuration":[{"id":"cpe:2.3:a:openmrs:openmrs:2.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openmrs:openmrs:2.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openmrs:openmrs:2.1:*:*:*:standalone:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.1:*:*:*:standalone:*:*:*"},{"id":"cpe:2.3:a:openmrs:openmrs:2.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openmrs:openmrs:2.3:*:*:*:*:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.3:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openmrs:openmrs:2.3.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.3.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openmrs:openmrs:2.4:*:*:*:*:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.4:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openmrs:openmrs:2.5:*:*:*:*:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.5:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:openmrs:openmrs:2.6.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:openmrs:openmrs:2.6.0:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:openmrs:openmrs:2.0:*:*:*:*:*:*:*","cpe:2.3:a:openmrs:openmrs:2.1:*:*:*:*:*:*:*","cpe:2.3:a:openmrs:openmrs:2.1:*:*:*:standalone:*:*:*","cpe:2.3:a:openmrs:openmrs:2.2:*:*:*:*:*:*:*","cpe:2.3:a:openmrs:openmrs:2.3:*:*:*:*:*:*:*","cpe:2.3:a:openmrs:openmrs:2.3.1:*:*:*:*:*:*:*","cpe:2.3:a:openmrs:openmrs:2.4:*:*:*:*:*:*:*","cpe:2.3:a:openmrs:openmrs:2.5:*:*:*:*:*:*:*","cpe:2.3:a:openmrs:openmrs:2.6.0:*:*:*:*:*:*:*"]}