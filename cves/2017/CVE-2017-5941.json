{"Modified":"2021-06-22T21:15:00","Published":"2017-02-09T19:59:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":7.5,"cvss-time":"2021-06-22T21:15:00","cvss-vector":"AV:N/AC:L/Au:N/C:P/I:P/A:P","cwe":"CWE-502","id":"CVE-2017-5941","impact":{"availability":"PARTIAL","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2021-06-22T21:15:00","references":["https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/","https://nodesecurity.io/advisories/311","http://www.securityfocus.com/bid/96225","http://packetstormsecurity.com/files/161356/Node.JS-Remote-Code-Execution.html","http://packetstormsecurity.com/files/163222/Node.JS-Remote-Code-Execution.html"],"refmap":{"bid":["96225"],"misc":["https://nodesecurity.io/advisories/311","https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/"]},"summary":"An issue was discovered in the node-serialize package 0.0.4 for Node.js. Untrusted data passed into the unserialize() function can be exploited to achieve arbitrary code execution by passing a JavaScript Object with an Immediately Invoked Function Expression (IIFE).","vulnerable_configuration":[{"id":"cpe:2.3:a:node-serialize_project:node-serialize:0.0.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:node-serialize_project:node-serialize:0.0.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:node-serialize_project:node-serialize:0.0.2:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:node-serialize_project:node-serialize:0.0.2:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:node-serialize_project:node-serialize:0.0.3:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:node-serialize_project:node-serialize:0.0.3:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:node-serialize_project:node-serialize:0.0.4:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:node-serialize_project:node-serialize:0.0.4:*:*:*:*:node.js:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:node-serialize_project:node-serialize:0.0.1:*:*:*:*:node.js:*:*","cpe:2.3:a:node-serialize_project:node-serialize:0.0.2:*:*:*:*:node.js:*:*","cpe:2.3:a:node-serialize_project:node-serialize:0.0.3:*:*:*:*:node.js:*:*","cpe:2.3:a:node-serialize_project:node-serialize:0.0.4:*:*:*:*:node.js:*:*"]}