{"Modified":"2019-10-03T00:03:00","Published":"2017-05-16T17:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[],"cvss":5,"cvss-time":"2019-10-03T00:03:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:N/A:P","cwe":"NVD-CWE-noinfo","id":"CVE-2017-6657","impact":{"availability":"PARTIAL","confidentiality":"NONE","integrity":"NONE"},"last-modified":"2019-10-03T00:03:00","references":["http://blog.snort.org/2017/05/snort-vulnerabilities-found.html","http://www.securitytracker.com/id/1038483","https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20170515-snort"],"refmap":{"confirm":["http://blog.snort.org/2017/05/snort-vulnerabilities-found.html"],"sectrack":["1038483"]},"summary":"Cisco Sourcefire Snort 3.0 before build 233 mishandles Ether Type Validation. Since valid ether type and IP protocol numbers do not overlap, Snort++ stores all protocol decoders in a single array. That makes it possible to craft packets that have IP protocol numbers in the ether type field which will confuse the Snort++ decoder. For example, an eth:llc:snap:icmp6 packet will cause a crash because there is no ip6 header with which to calculate the icmp6 checksum. Affected decoders include gre, llc, trans_bridge, ciscometadata, linux_sll, and token_ring. The fix adds a check in the packet manager to validate the ether type before indexing the decoder array. An out of range ether type will raise 116:473.","vulnerable_configuration":[{"id":"cpe:2.3:a:cisco:snort\\+\\+:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:snort\\+\\+:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:cisco:snort\\+\\+:-:*:*:*:*:*:*:*"]}