{"Modified":"2017-06-06T14:10:00","Published":"2017-05-26T01:29:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"81","name":"Web Logs Tampering","prerequisites":"Target server software must be a HTTP server that performs web logging.","related_weakness":["116","117","150","20","221","276","279","713","75","93","96"],"solutions":"Design: Use input validation before writing to web log Design: Validate all log data before it is output","summary":"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application."},{"id":"15","name":"Command Delimiters","prerequisites":"Software's input validation or filtering must not detect and block presence of additional malicious command.","related_weakness":["138","140","146","154","157","184","185","697","713","77","78","93"],"solutions":"Design: Perform whitelist validation against a positive specification for command length, type, and parameters. Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account Implementation: Perform input validation for all remote content. Implementation: Use type conversions such as JDBC prepared statements.","summary":"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."}],"cvss":4.3,"cvss-time":"2017-06-06T14:10:00","cvss-vector":"AV:N/AC:M/Au:N/C:N/I:P/A:N","cwe":"CWE-93","id":"CVE-2017-5868","impact":{"availability":"NONE","confidentiality":"NONE","integrity":"PARTIAL"},"last-modified":"2017-06-06T14:10:00","references":["http://www.openwall.com/lists/oss-security/2017/05/23/13","http://www.securitytracker.com/id/1038547","https://sysdream.com/news/lab/2017-05-05-cve-2017-5868-openvpn-access-server-crlf-injection-with-session-fixation/"],"refmap":{"misc":["https://sysdream.com/news/lab/2017-05-05-cve-2017-5868-openvpn-access-server-crlf-injection-with-session-fixation/"],"mlist":["[oss-security] 20170523 [CVE-2017-5868] OpenVPN Access Server : CRLF injection with Session fixation"],"sectrack":["1038547"]},"summary":"CRLF injection vulnerability in the web interface in OpenVPN Access Server 2.1.4 allows remote attackers to inject arbitrary HTTP headers and consequently conduct session fixation attacks and possibly HTTP response splitting attacks via \"%0A\" characters in the PATH_INFO to __session_start__/.","vulnerable_configuration":[{"id":"cpe:2.3:a:openvpn:openvpn_access_server:2.1.4:*:*:*:*:*:*:*","title":"cpe:2.3:a:openvpn:openvpn_access_server:2.1.4:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:openvpn:openvpn_access_server:2.1.4:*:*:*:*:*:*:*"]}