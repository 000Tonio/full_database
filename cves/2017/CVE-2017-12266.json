{"Modified":"2019-10-09T23:22:00","Published":"2017-10-05T07:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"LOCAL"},"assigner":"cve@mitre.org","capec":[{"id":"38","name":"Leveraging/Manipulating Configuration File Search Paths","prerequisites":"The attacker must be able to write to redirect search paths on the victim host.","related_weakness":["426","427"],"solutions":"Design: Enforce principle of least privilege Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program Implementation: Host integrity monitoring","summary":"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker."},{"id":"471","name":"Search Order Hijacking","prerequisites":"Attacker has a mechanism to place its malicious libraries in the needed location on the file system.","related_weakness":["427"],"solutions":"Design: Sign system DLLs so that unauthorized DLLs can be detected.","summary":"An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded."}],"cvss":4.6,"cvss-time":"2019-10-09T23:22:00","cvss-vector":"AV:L/AC:L/Au:N/C:P/I:P/A:P","cwe":"CWE-427","id":"CVE-2017-12266","impact":{"availability":"PARTIAL","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2019-10-09T23:22:00","references":["http://www.securityfocus.com/bid/101158","https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20171004-cma"],"refmap":{"bid":["101158"],"confirm":["https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20171004-cma"]},"summary":"A vulnerability in the routine that loads DLL files in Cisco Meeting App for Windows could allow an authenticated, local attacker to run an executable file with privileges equivalent to those of Cisco Meeting App. The vulnerability is due to incomplete input validation of the path name for DLL files before they are loaded. An attacker could exploit this vulnerability by installing a crafted DLL file in a specific system directory. A successful exploit could allow the attacker to execute commands on the underlying Microsoft Windows host with privileges equivalent to those of Cisco Meeting App. The attacker would need valid user credentials to exploit this vulnerability. Cisco Bug IDs: CSCvd77907.","vulnerable_configuration":[{"id":"cpe:2.3:a:cisco:meeting_app:*:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:meeting_app:*:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:cisco:meeting_app:*:*:*:*:*:*:*:*"]}