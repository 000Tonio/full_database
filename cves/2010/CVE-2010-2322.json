{"Modified":"2013-04-19T03:03:00","Published":"2010-06-18T18:30:00","access":{"authentication":"NONE","complexity":"HIGH","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"76","name":"Manipulating Web Input to File System Calls","prerequisites":"Program must allow for user controlled variables to be applied directly to the filesystem","related_weakness":["15","22","23","264","272","285","346","348","59","715","73","74","77"],"solutions":"Design: Enforce principle of least privilege. Design: Ensure all input is validated, and does not contain file system commands Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.","summary":"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."},{"id":"64","name":"Using Slashes and URL Encoding Combined to Bypass Validation Logic","prerequisites":"The application accepts and decodes URL string request. The application performs insufficient filtering/canonicalization on the URLs.","related_weakness":["171","172","173","177","20","21","22","697","707","73","74"],"solutions":"Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input. Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL. Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).","summary":"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc."},{"id":"78","name":"Using Escaped Slashes in Alternate Encoding","prerequisites":"The application accepts the backlash character as escape character. The application server does incomplete input data decoding, filtering and validation.","related_weakness":["171","172","173","180","181","20","21","22","697","707","73","74"],"solutions":"Verify that the user-supplied data does not use backslash character to escape malicious characters. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Be aware of the threat of alternative method of data encoding. Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data. In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","summary":"This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack."},{"id":"126","name":"Path Traversal","prerequisites":"The attacker must be able to control the path that is requested of the target. The target must fail to adequately sanitize incoming paths","related_weakness":["22"],"solutions":"Design: Configure the access control correctly. Design: Enforce principle of least privilege. Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution. Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement. Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host. Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin. Implementation: Perform input validation for all remote content, including remote and user-generated content. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. Implementation: Use indirect references rather than actual file names. Implementation: Use possible permissions on file access when developing and deploying web applications. Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.","summary":"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files."},{"id":"79","name":"Using Slashes in Alternate Encoding","prerequisites":"The application server accepts paths to locate resources. The application server does insufficient input data validation on the resource path requested by the user. The access right to resources are not set properly.","related_weakness":["171","173","180","181","185","20","200","21","22","697","707","73","74"],"solutions":"Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL. When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx) Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section) Test your path decoding process against malicious input. In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.","summary":"This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other."}],"cvss":2.6,"cvss-time":"2013-04-19T03:03:00","cvss-vector":"AV:N/AC:H/Au:N/C:N/I:P/A:N","cwe":"CWE-22","id":"CVE-2010-2322","impact":{"availability":"NONE","confidentiality":"NONE","integrity":"PARTIAL"},"last-modified":"2013-04-19T03:03:00","redhat":{"advisories":[{"bugzilla":{"id":"635708","title":"Huge performance problem with libstdc++ and multithread applications"},"oval":{"OR":[{"comment":"Red Hat Enterprise Linux must be installed","oval":"oval:com.redhat.rhba:tst:20070304026"},{"AND":[{"comment":"Red Hat Enterprise Linux 5 is installed","oval":"oval:com.redhat.rhba:tst:20070331005"},{"OR":[{"AND":[{"comment":"cpp is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025001"},{"comment":"cpp is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039059"}]},{"AND":[{"comment":"gcc is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025003"},{"comment":"gcc is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039061"}]},{"AND":[{"comment":"gcc-c++ is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025005"},{"comment":"gcc-c++ is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039063"}]},{"AND":[{"comment":"gcc-gfortran is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025007"},{"comment":"gcc-gfortran is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039065"}]},{"AND":[{"comment":"gcc-gnat is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025009"},{"comment":"gcc-gnat is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039067"}]},{"AND":[{"comment":"gcc-java is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025011"},{"comment":"gcc-java is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039069"}]},{"AND":[{"comment":"gcc-objc is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025013"},{"comment":"gcc-objc is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039071"}]},{"AND":[{"comment":"gcc-objc++ is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025015"},{"comment":"gcc-objc++ is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039073"}]},{"AND":[{"comment":"libgcc is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025017"},{"comment":"libgcc is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039075"}]},{"AND":[{"comment":"libgcj is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025019"},{"comment":"libgcj is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039077"}]},{"AND":[{"comment":"libgcj-devel is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025021"},{"comment":"libgcj-devel is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039079"}]},{"AND":[{"comment":"libgcj-src is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025023"},{"comment":"libgcj-src is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039081"}]},{"AND":[{"comment":"libgfortran is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025025"},{"comment":"libgfortran is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039083"}]},{"AND":[{"comment":"libgnat is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025027"},{"comment":"libgnat is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039085"}]},{"AND":[{"comment":"libmudflap is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025029"},{"comment":"libmudflap is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039087"}]},{"AND":[{"comment":"libmudflap-devel is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025031"},{"comment":"libmudflap-devel is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039089"}]},{"AND":[{"comment":"libobjc is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025033"},{"comment":"libobjc is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039091"}]},{"AND":[{"comment":"libstdc++ is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025035"},{"comment":"libstdc++ is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039093"}]},{"AND":[{"comment":"libstdc++-devel is earlier than 0:4.1.2-50.el5","oval":"oval:com.redhat.rhsa:tst:20110025037"},{"comment":"libstdc++-devel is signed with Red Hat redhatrelease key","oval":"oval:com.redhat.rhsa:tst:20100039095"}]}]}]}]},"rhsa":{"id":"RHSA-2011:0025","released":"2011-01-13","severity":"Low","title":"RHSA-2011:0025: gcc security and bug fix update (Low)"}}],"rpms":["cpp-0:4.1.2-50.el5","gcc-0:4.1.2-50.el5","gcc-c++-0:4.1.2-50.el5","gcc-debuginfo-0:4.1.2-50.el5","gcc-gfortran-0:4.1.2-50.el5","gcc-gnat-0:4.1.2-50.el5","gcc-java-0:4.1.2-50.el5","gcc-objc++-0:4.1.2-50.el5","gcc-objc-0:4.1.2-50.el5","libgcc-0:4.1.2-50.el5","libgcj-0:4.1.2-50.el5","libgcj-devel-0:4.1.2-50.el5","libgcj-src-0:4.1.2-50.el5","libgfortran-0:4.1.2-50.el5","libgnat-0:4.1.2-50.el5","libmudflap-0:4.1.2-50.el5","libmudflap-devel-0:4.1.2-50.el5","libobjc-0:4.1.2-50.el5","libstdc++-0:4.1.2-50.el5","libstdc++-devel-0:4.1.2-50.el5"]},"references":["http://marc.info/?l=oss-security&m=127602564508766&w=2","http://packages.debian.org/changelogs/pool/main/f/fastjar/fastjar_0.98-3/changelog","http://secunia.com/advisories/42892","http://secunia.com/advisories/50786","http://security.gentoo.org/glsa/glsa-201209-21.xml","http://www.osvdb.org/65467","http://www.redhat.com/support/errata/RHSA-2011-0025.html","http://www.securityfocus.com/bid/41009","http://www.vupen.com/english/advisories/2011/0121","https://bugzilla.redhat.com/show_bug.cgi?id=594497","https://bugzilla.redhat.com/show_bug.cgi?id=601823","https://launchpad.net/bugs/540575"],"refmap":{"bid":["41009"],"confirm":["http://packages.debian.org/changelogs/pool/main/f/fastjar/fastjar_0.98-3/changelog","https://bugzilla.redhat.com/show_bug.cgi?id=594497","https://bugzilla.redhat.com/show_bug.cgi?id=601823","https://launchpad.net/bugs/540575"],"gentoo":["GLSA-201209-21"],"mlist":["[oss-security] 20100608 jar, fastjar directory traversal vulnerabilities"],"osvdb":["65467"],"secunia":["42892","50786"],"vupen":["ADV-2011-0121"]},"summary":"Absolute path traversal vulnerability in the extract_jar function in jartool.c in FastJar 0.98 allows remote attackers to create or overwrite arbitrary files via a full pathname for a file within a .jar archive, a related issue to CVE-2010-0831.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2006-3619.","vulnerable_configuration":[{"id":"cpe:2.3:a:matthias_klose:fastjar:0.98:*:*:*:*:*:*:*","title":"cpe:2.3:a:matthias_klose:fastjar:0.98:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:matthias_klose:fastjar:0.98:*:*:*:*:*:*:*"]}