{"Modified":"2021-01-27T15:48:00","Published":"2021-01-20T20:15:00","access":{"authentication":"SINGLE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"71","name":"Using Unicode Encoding to Bypass Validation Logic","prerequisites":"Filtering is performed on data that has not be properly canonicalized.","related_weakness":["171","172","173","176","179","180","183","184","20","692","697","74"],"solutions":"Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII. Ensure that filtering or input validation is applied to canonical data. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.","summary":"An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly."},{"id":"6","name":"Argument Injection","prerequisites":"Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions. Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.","related_weakness":["146","184","185","697","713","74","78"],"solutions":"Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process. Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred. Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.","summary":"An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods."},{"id":"15","name":"Command Delimiters","prerequisites":"Software's input validation or filtering must not detect and block presence of additional malicious command.","related_weakness":["138","140","146","154","157","184","185","697","713","77","78","93"],"solutions":"Design: Perform whitelist validation against a positive specification for command length, type, and parameters. Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account Implementation: Perform input validation for all remote content. Implementation: Use type conversions such as JDBC prepared statements.","summary":"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."},{"id":"85","name":"AJAX Fingerprinting","prerequisites":"The user must allow JavaScript to execute in their browser","related_weakness":["113","116","184","20","348","692","712","79","86","96"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.","summary":"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."},{"id":"120","name":"Double Encoding","prerequisites":"The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character. The application accepts and decodes URL string request. The application performs insufficient filtering/canonicalization on the URLs.","related_weakness":["171","172","173","177","181","183","184","20","21","692","697","74"],"solutions":"Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input. Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL. Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).","summary":"The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target."},{"id":"182","name":"Flash Injection","prerequisites":"The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.","related_weakness":["184","20","697"],"solutions":"Implementation: remove sensitive information such as user name and password in the SWF file. Implementation: use validation on both client and server side. Implementation: remove debug information. Implementation: use SSL when loading external data Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.","summary":"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker."},{"id":"3","name":"Using Leading 'Ghost' Character Sequences to Bypass Input Filters","prerequisites":"The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.","related_weakness":["171","172","173","179","180","181","183","184","20","41","697","707","74"],"solutions":"Perform white list rather than black list input validation. Canonicalize all data prior to validation. Take an iterative approach to input validation (defense in depth).","summary":"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading \"ghost\" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API."},{"id":"43","name":"Exploiting Multiple Input Interpretation Layers","prerequisites":"User input is used to construct a command to be executed on the target system or as part of the file name. Multiple parser passes are performed on the data supplied by the user.","related_weakness":["171","179","181","183","184","20","697","707","74","77","78"],"solutions":"An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it. Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.","summary":"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."},{"id":"73","name":"User-Controlled Filename","prerequisites":"The victim must trust the name and locale of user controlled filenames.","related_weakness":["116","184","20","348","350","697","86","96"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Scan dynamically generated content against validation specification","summary":"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities."}],"cvss":5.5,"cvss-time":"2021-01-27T15:48:00","cvss-vector":"AV:N/AC:L/Au:S/C:P/I:P/A:N","cwe":"CWE-184","id":"CVE-2021-1255","impact":{"availability":"NONE","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2021-01-27T15:48:00","references":["https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-dcnm-api-path-TpTApx2p"],"refmap":{"cisco":["20210120 Cisco Data Center Network Manager REST API Vulnerabilities"]},"summary":"Multiple vulnerabilities in the REST API endpoint of Cisco Data Center Network Manager (DCNM) could allow an authenticated, remote attacker to view, modify, and delete data without proper authorization. For more information about these vulnerabilities, see the Details section of this advisory.","vulnerable_configuration":[{"id":"cpe:2.3:a:cisco:data_center_network_manager:4.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:4.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:4.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:4.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:4.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:4.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:5.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:5.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:10.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:10.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:10.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:10.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:10.2\\(1\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:10.2\\(1\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:10.3\\(1\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:10.3\\(1\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:10.3\\(1\\)s3:*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:10.3\\(1\\)s3:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:10.4\\(1\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:10.4\\(1\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:10.4\\(1.128\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:10.4\\(1.128\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:10.4\\(2\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:10.4\\(2\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:11.0\\(1\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:11.0\\(1\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:11.1\\(1\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:11.1\\(1\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:11.2\\(1\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:11.2\\(1\\):*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:cisco:data_center_network_manager:11.3\\(1\\):*:*:*:*:*:*:*","title":"cpe:2.3:a:cisco:data_center_network_manager:11.3\\(1\\):*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:cisco:data_center_network_manager:4.0:*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:4.1:*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:4.2:*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:5.0:*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:10.0:*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:10.1:*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:10.2\\(1\\):*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:10.3\\(1\\):*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:10.3\\(1\\)s3:*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:10.4\\(1\\):*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:10.4\\(1.128\\):*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:10.4\\(2\\):*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:11.0\\(1\\):*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:11.1\\(1\\):*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:11.2\\(1\\):*:*:*:*:*:*:*","cpe:2.3:a:cisco:data_center_network_manager:11.3\\(1\\):*:*:*:*:*:*:*"]}