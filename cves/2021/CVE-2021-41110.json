{"Modified":"2021-10-08T16:21:00","Published":"2021-10-01T13:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"security-advisories@github.com","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":7.5,"cvss-time":"2021-10-08T16:21:00","cvss-vector":"AV:N/AC:L/Au:N/C:P/I:P/A:P","cwe":"CWE-502","id":"CVE-2021-41110","impact":{"availability":"PARTIAL","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2021-10-08T16:21:00","references":["https://www.fatalerrors.org/a/analysis-of-the-snakeyaml-deserialization-in-java-security.html","https://github.com/common-workflow-language/cwlviewer/commit/f6066f09edb70033a2ce80200e9fa9e70a5c29de","https://github.com/common-workflow-language/cwlviewer/security/advisories/GHSA-7g7j-f5g3-fqp7"],"summary":"cwlviewer is a web application to view and share Common Workflow Language workflows. Versions prior to 1.3.1 contain a Deserialization of Untrusted Data vulnerability. Commit number f6066f09edb70033a2ce80200e9fa9e70a5c29de (dated 2021-09-30) contains a patch. There are no available workarounds aside from installing the patch. The SnakeYaml constructor, by default, allows any data to be parsed. To fix the issue the object needs to be created with a `SafeConstructor` object, as seen in the patch.","vulnerable_configuration":[{"id":"cpe:2.3:a:commonwl:cwlviewer:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:commonwl:cwlviewer:1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:commonwl:cwlviewer:1.0.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:1.0.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:commonwl:cwlviewer:1.1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:1.1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:commonwl:cwlviewer:1.1.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:1.1.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:commonwl:cwlviewer:1.2.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:1.2.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:commonwl:cwlviewer:1.2.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:1.2.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:commonwl:cwlviewer:1.2.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:1.2.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:commonwl:cwlviewer:1.3.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:commonwl:cwlviewer:1.3.0:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:commonwl:cwlviewer:-:*:*:*:*:*:*:*","cpe:2.3:a:commonwl:cwlviewer:1.0:*:*:*:*:*:*:*","cpe:2.3:a:commonwl:cwlviewer:1.0.1:*:*:*:*:*:*:*","cpe:2.3:a:commonwl:cwlviewer:1.1.0:*:*:*:*:*:*:*","cpe:2.3:a:commonwl:cwlviewer:1.1.1:*:*:*:*:*:*:*","cpe:2.3:a:commonwl:cwlviewer:1.2.0:*:*:*:*:*:*:*","cpe:2.3:a:commonwl:cwlviewer:1.2.1:*:*:*:*:*:*:*","cpe:2.3:a:commonwl:cwlviewer:1.2.2:*:*:*:*:*:*:*","cpe:2.3:a:commonwl:cwlviewer:1.3.0:*:*:*:*:*:*:*"]}