{"Modified":"2021-01-07T20:52:00","Published":"2021-01-03T04:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"128","name":"Integer Attacks","prerequisites":"The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use. The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.","related_weakness":["682"],"solutions":"","summary":"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats."},{"id":"129","name":"Pointer Manipulation","prerequisites":"The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.","related_weakness":["682","822","823"],"solutions":"","summary":"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks."}],"cvss":5,"cvss-time":"2021-01-07T20:52:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:P/A:N","cwe":"CWE-682","id":"CVE-2021-3004","impact":{"availability":"NONE","confidentiality":"NONE","integrity":"PARTIAL"},"last-modified":"2021-01-07T20:52:00","references":["https://blocksecteam.medium.com/deposit-less-get-more-ycredit-attack-details-f589f71674c3","https://etherscan.io/address/0xe0839f9b9688a77924208ad509e29952dc660261"],"refmap":{"misc":["https://blocksecteam.medium.com/deposit-less-get-more-ycredit-attack-details-f589f71674c3","https://etherscan.io/address/0xe0839f9b9688a77924208ad509e29952dc660261"]},"summary":"The _deposit function in the smart contract implementation for Stable Yield Credit (yCREDIT), an Ethereum token, has certain incorrect calculations. An attacker can obtain more yCREDIT tokens than they should.","vulnerable_configuration":[{"id":"cpe:2.3:a:stableyieldcredit_project:stableyieldcredit:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:stableyieldcredit_project:stableyieldcredit:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:stableyieldcredit_project:stableyieldcredit:-:*:*:*:*:*:*:*"]}