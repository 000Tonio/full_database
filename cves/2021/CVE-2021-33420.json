{"Modified":"2022-12-20T17:11:00","Published":"2022-12-15T19:15:00","access":{},"assigner":"cve@mitre.org","capec":[{"id":"586","name":"Object Injection","prerequisites":"The target application must unserialize data before validation.","related_weakness":["502"],"solutions":"Implementation: Keep session state on the server, when possible.","summary":"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution."}],"cvss":null,"cwe":"CWE-502","id":"CVE-2021-33420","impact":{},"last-modified":"2022-12-20T17:11:00","references":["https://github.com/inikulin/replicator/commit/2c626242fb4a118855262c64b5731b2ce98e521b","https://advisory.checkmarx.net/advisory/CX-2021-4787","https://github.com/inikulin/replicator/pull/17","https://github.com/inikulin/replicator/issues/16"],"summary":"A deserialization issue discovered in inikulin replicator before 1.0.4 allows remote attackers to run arbitrary code via the fromSerializable function in TypedArray object.","vulnerable_configuration":[{"id":"cpe:2.3:a:replicator_project:replicator:*:*:*:*:*:*:*:*","title":"cpe:2.3:a:replicator_project:replicator:*:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:replicator_project:replicator:*:*:*:*:*:*:*:*"]}