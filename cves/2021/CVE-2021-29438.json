{"Modified":"2021-04-19T15:14:00","Published":"2021-04-13T20:15:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"security-advisories@github.com","capec":[{"id":"86","name":"XSS Through HTTP Headers","prerequisites":"Target software must be a client that allows scripting communication from remote hosts.","related_weakness":["80"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.","summary":"An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications."},{"id":"18","name":"XSS Targeting Non-Script Elements","prerequisites":"The target client software must allow the execution of scripts generated by remote hosts.","related_weakness":["80"],"solutions":"In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered. All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.","summary":"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack."},{"id":"193","name":"PHP Remote File Inclusion","prerequisites":"Target application server must allow remote files to be included in the \"require\", \"include\", etc. PHP directives The adversary must have the ability to make HTTP requests to the target web application.","related_weakness":["714","80","98"],"solutions":"Implementation: Perform input validation for all remote content, including remote and user-generated content Implementation: Only allow known files to be included (whitelist) Implementation: Make use of indirect references passed in URL parameters instead of file names Configuration: Ensure that remote scripts cannot be include in the \"include\" or \"require\" PHP directives","summary":"In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized \"include\" or \"require\" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions."},{"id":"32","name":"XSS Through HTTP Query Strings","prerequisites":"Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.","related_weakness":["80"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content, including remote and user-generated content Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode","summary":"An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser."}],"cvss":4.3,"cvss-time":"2021-04-19T15:14:00","cvss-vector":"AV:N/AC:M/Au:N/C:N/I:P/A:N","cwe":"CWE-80","id":"CVE-2021-29438","impact":{"availability":"NONE","confidentiality":"NONE","integrity":"PARTIAL"},"last-modified":"2021-04-19T15:14:00","references":["https://github.com/nextcloud/nextcloud-dialogs/security/advisories/GHSA-g3fq-3v3g-mh32","https://www.npmjs.com/package/@nextcloud/dialogs"],"summary":"The Nextcloud dialogs library (npm package @nextcloud/dialogs) before 3.1.2 insufficiently escaped text input passed to a toast. If your application displays toasts with user-supplied input, this could lead to a XSS vulnerability. The vulnerability has been patched in version 3.1.2 If you need to display HTML in the toast, explicitly pass the `options.isHTML` config flag.","vulnerable_configuration":[{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.2:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.2:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.3:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.3:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.1.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.1.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.1.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.1.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.0.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.0.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.1.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.1.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.2:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.2:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.3.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.3.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.3.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.3.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.4.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.4.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:2.0.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:2.0.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:2.0.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:2.0.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.0.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.0.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.0.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.0.1:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.1.0:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.1.0:*:*:*:*:node.js:*:*"},{"id":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.1.1:*:*:*:*:node.js:*:*","title":"cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.1.1:*:*:*:*:node.js:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.1:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.2:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.0.3:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.1.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:0.1.1:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.0.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.1.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.1:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.2.2:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.3.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.3.1:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:1.4.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:2.0.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:2.0.1:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.0.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.0.1:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.1.0:*:*:*:*:node.js:*:*","cpe:2.3:a:nextcloud\\/dialogs_project:nextcloud\\/dialogs:3.1.1:*:*:*:*:node.js:*:*"]}