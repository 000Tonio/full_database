{"Modified":"2021-10-28T14:16:00","Published":"2021-10-25T11:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"47","name":"Buffer Overflow via Parameter Expansion","prerequisites":"The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter. The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).","related_weakness":["118","119","120","130","131","20","680","697","74"],"solutions":"Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system","summary":"In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow."},{"id":"100","name":"Overflow Buffers","prerequisites":"Targeted software performs buffer operations. Targeted software inadequately performs bounds-checking on buffer operations. Adversary has the capability to influence the input to buffer operations.","related_weakness":["119","120","129","131","19","680","805"],"solutions":"Use a language or compiler that performs automatic bounds checking. Use secure functions not vulnerable to buffer overflow. If you have to use dangerous functions, make sure that you do boundary checking. Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. Use OS-level preventative functionality. Not a complete solution. Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.","summary":"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice."}],"cvss":5,"cvss-time":"2021-10-28T14:16:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:N/A:P","cwe":"CWE-131","id":"CVE-2021-40526","impact":{"availability":"PARTIAL","confidentiality":"NONE","integrity":"NONE"},"last-modified":"2021-10-28T14:16:00","references":["https://twitter.com/ROPsicle/status/1438216078103044107?s=20"],"summary":"Incorrect calculation of buffer size vulnerability in Peleton TTR01 up to and including PTV55G allows a remote attacker to trigger a Denial of Service attack through the GymKit daemon process by exploiting a heap overflow in the network server handling the Apple GymKit communication. This can lead to an Apple MFI device not being able to authenticate with the Peleton Bike","vulnerable_configuration":[{"id":"cpe:2.3:o:onepeloton:ttr01_firmware:-:*:*:*:*:*:*:*","title":"cpe:2.3:o:onepeloton:ttr01_firmware:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:onepeloton:ttr01_firmware:ptv55g:*:*:*:*:*:*:*","title":"cpe:2.3:o:onepeloton:ttr01_firmware:ptv55g:*:*:*:*:*:*:*"},{"id":"cpe:2.3:h:onepeloton:ttr01:-:*:*:*:*:*:*:*","title":"cpe:2.3:h:onepeloton:ttr01:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:o:onepeloton:ttr01_firmware:-:*:*:*:*:*:*:*","cpe:2.3:o:onepeloton:ttr01_firmware:ptv55g:*:*:*:*:*:*:*"]}