{"Modified":"2021-05-14T19:56:00","Published":"2021-04-28T19:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"security-advisories@github.com","capec":[],"cvss":5,"cvss-time":"2021-05-14T19:56:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:N/A:P","cwe":"CWE-835","id":"CVE-2021-29482","impact":{"availability":"PARTIAL","confidentiality":"NONE","integrity":"NONE"},"last-modified":"2021-05-14T19:56:00","references":["https://github.com/ulikunitz/xz/security/advisories/GHSA-25xm-hr59-7c27","https://github.com/ulikunitz/xz/commit/69c6093c7b2397b923acf82cb378f55ab2652b9b"],"summary":"xz is a compression and decompression library focusing on the xz format completely written in Go. The function readUvarint used to read the xz container format may not terminate a loop provide malicous input. The problem has been fixed in release v0.5.8. As a workaround users can limit the size of the compressed file input to a reasonable size for their use case. The standard library had recently the same issue and got the CVE-2020-16845 allocated.","vulnerable_configuration":[{"id":"cpe:2.3:a:xz_project:xz:-:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:-:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.1:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.1:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.2:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.2:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.3:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.3:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.3.1:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.3.1:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.4:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.4:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.4.1:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.4.1:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.5:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.5:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.5.1:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.5.1:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.5.2:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.5.2:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.5.3:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.5.3:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.5.4:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.5.4:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.5.5:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.5.5:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.5.6:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.5.6:*:*:*:*:go:*:*"},{"id":"cpe:2.3:a:xz_project:xz:0.5.7:*:*:*:*:go:*:*","title":"cpe:2.3:a:xz_project:xz:0.5.7:*:*:*:*:go:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:xz_project:xz:-:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.1:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.2:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.3:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.3.1:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.4:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.4.1:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.5:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.5.1:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.5.2:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.5.3:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.5.4:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.5.5:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.5.6:*:*:*:*:go:*:*","cpe:2.3:a:xz_project:xz:0.5.7:*:*:*:*:go:*:*"]}