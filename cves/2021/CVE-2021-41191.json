{"Modified":"2021-11-02T14:54:00","Published":"2021-10-27T21:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"security-advisories@github.com","capec":[{"id":"81","name":"Web Logs Tampering","prerequisites":"Target server software must be a HTTP server that performs web logging.","related_weakness":["116","117","150","20","221","276","279","713","75","93","96"],"solutions":"Design: Use input validation before writing to web log Design: Validate all log data before it is output","summary":"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application."},{"id":"104","name":"Cross Zone Scripting","prerequisites":"The target must be using a zone-aware browser.","related_weakness":["116","20","250","285","638"],"solutions":"Disable script execution. Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum Ensure proper HTML output encoding before writing user supplied data to the page","summary":"An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from \"Restful Privilege Escalation\" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser."},{"id":"85","name":"AJAX Fingerprinting","prerequisites":"The user must allow JavaScript to execute in their browser","related_weakness":["113","116","184","20","348","692","712","79","86","96"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.","summary":"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."},{"id":"73","name":"User-Controlled Filename","prerequisites":"The victim must trust the name and locale of user controlled filenames.","related_weakness":["116","184","20","348","350","697","86","96"],"solutions":"Design: Use browser technologies that do not allow client side scripting. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Scan dynamically generated content against validation specification","summary":"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities."}],"cvss":5,"cvss-time":"2021-11-02T14:54:00","cvss-vector":"AV:N/AC:L/Au:N/C:P/I:N/A:N","cwe":"CWE-116","id":"CVE-2021-41191","impact":{"availability":"NONE","confidentiality":"PARTIAL","integrity":"NONE"},"last-modified":"2021-11-02T14:54:00","references":["https://github.com/Redon-Tech/Roblox-Purchasing-Hub/releases/tag/V1.0.2","https://github.com/Redon-Tech/Roblox-Purchasing-Hub/security/advisories/GHSA-76mx-6584-4v8q","https://github.com/Redon-Tech/Roblox-Purchasing-Hub/commit/58a22260eca40b1a0377daf61ccd8c4dc1440e03"],"summary":"Roblox-Purchasing-Hub is an open source Roblox product purchasing hub. A security risk in versions 1.0.1 and prior allowed people who have someone's API URL to get product files without an API key. This issue is fixed in version 1.0.2. As a workaround, add `@require_apikey` in `BOT/lib/cogs/website.py` under the route for `/v1/products`.","vulnerable_configuration":[{"id":"cpe:2.3:a:redon:roblox_purchasing_hub:0.8:*:*:*:*:*:*:*","title":"cpe:2.3:a:redon:roblox_purchasing_hub:0.8:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:redon:roblox_purchasing_hub:0.9:*:*:*:*:*:*:*","title":"cpe:2.3:a:redon:roblox_purchasing_hub:0.9:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:redon:roblox_purchasing_hub:1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:redon:roblox_purchasing_hub:1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:redon:roblox_purchasing_hub:1.0.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:redon:roblox_purchasing_hub:1.0.1:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:redon:roblox_purchasing_hub:0.8:*:*:*:*:*:*:*","cpe:2.3:a:redon:roblox_purchasing_hub:0.9:*:*:*:*:*:*:*","cpe:2.3:a:redon:roblox_purchasing_hub:1.0:*:*:*:*:*:*:*","cpe:2.3:a:redon:roblox_purchasing_hub:1.0.1:*:*:*:*:*:*:*"]}