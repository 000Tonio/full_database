{"Modified":"2021-11-02T19:16:00","Published":"2020-03-13T16:15:00","access":{"authentication":"NONE","complexity":"LOW","vector":"LOCAL"},"assigner":"psirt@lenovo.com","capec":[{"id":"215","name":"Fuzzing and observing application log data/errors for application mapping","prerequisites":"The target application must fail to sanitize incoming messages adequately before processing.","related_weakness":["209","532"],"solutions":"Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally. Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion. Implementation: Obfuscate server fields of HTTP response. Implementation: Hide inner ordering of HTTP response header. Implementation: Customizing HTTP error codes such as 404 or 500. Implementation: Hide HTTP response header software information filed. Implementation: Hide cookie's software information filed. Implementation: Obfuscate database type in Database API's error message.","summary":"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information."}],"cvss":3.6,"cvss-time":"2021-11-02T19:16:00","cvss-vector":"AV:L/AC:L/Au:N/C:P/I:P/A:N","cwe":"CWE-532","id":"CVE-2019-19756","impact":{"availability":"NONE","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2021-11-02T19:16:00","references":["https://support.lenovo.com/us/en/product_security/LEN-29942"],"refmap":{"confirm":["https://support.lenovo.com/us/en/product_security/LEN-29942"]},"summary":"An internal product security audit of Lenovo XClarity Administrator (LXCA) discovered Windows OS credentials, used to perform driver updates of managed systems, being written to a log file in clear text. This only affects LXCA version 2.6.0 when performing a Windows driver update. Affected logs are only accessible to authorized users in the First Failure Data Capture (FFDC) service log and log files on LXCA.","vulnerable_configuration":[{"id":"cpe:2.3:a:lenovo:xclarity_administrator:2.6.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:lenovo:xclarity_administrator:2.6.0:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:lenovo:xclarity_administrator:2.6.0:*:*:*:*:*:*:*"]}