{"Modified":"2020-04-09T14:01:00","Published":"2020-02-03T14:15:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"LOCAL"},"assigner":"cve@mitre.org","capec":[{"id":"215","name":"Fuzzing and observing application log data/errors for application mapping","prerequisites":"The target application must fail to sanitize incoming messages adequately before processing.","related_weakness":["209","532"],"solutions":"Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally. Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion. Implementation: Obfuscate server fields of HTTP response. Implementation: Hide inner ordering of HTTP response header. Implementation: Customizing HTTP error codes such as 404 or 500. Implementation: Hide HTTP response header software information filed. Implementation: Hide cookie's software information filed. Implementation: Obfuscate database type in Database API's error message.","summary":"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information."}],"cvss":6.9,"cvss-time":"2020-04-09T14:01:00","cvss-vector":"AV:L/AC:M/Au:N/C:C/I:C/A:C","cwe":"CWE-532","id":"CVE-2019-18193","impact":{"availability":"COMPLETE","confidentiality":"COMPLETE","integrity":"COMPLETE"},"last-modified":"2020-04-09T14:01:00","references":["https://public.support.unisys.com/common/public/vulnerability/NVD_Detail_Rpt.aspx?ID=52","https://www.unisys.com/offerings/security-solutions/unisys-stealth-products-and-services"],"refmap":{"confirm":["https://public.support.unisys.com/common/public/vulnerability/NVD_Detail_Rpt.aspx?ID=52"],"misc":["https://www.unisys.com/offerings/security-solutions/unisys-stealth-products-and-services"]},"summary":"In Unisys Stealth (core) 3.4.108.0, 3.4.209.x, 4.0.027.x and 4.0.114, key material inadvertently logged under certain conditions. Fixed included in 3.4.109, 4.0.027.13, 4.0.125 and 5.0.013.0.","vulnerable_configuration":[{"id":"cpe:2.3:a:unisys:stealth:3.4.108.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:unisys:stealth:3.4.108.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:unisys:stealth:3.4.209.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:unisys:stealth:3.4.209.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:unisys:stealth:4.0.027.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:unisys:stealth:4.0.027.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:unisys:stealth:4.0.114:*:*:*:*:*:*:*","title":"cpe:2.3:a:unisys:stealth:4.0.114:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:unisys:stealth:3.4.108.0:*:*:*:*:*:*:*","cpe:2.3:a:unisys:stealth:3.4.209.0:*:*:*:*:*:*:*","cpe:2.3:a:unisys:stealth:4.0.027.0:*:*:*:*:*:*:*","cpe:2.3:a:unisys:stealth:4.0.114:*:*:*:*:*:*:*"]}