{"Modified":"2021-07-21T11:39:00","Published":"2019-10-02T19:15:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"383","name":"Harvesting Information via API Event Monitoring","prerequisites":"The target software is utilizing application framework APIs","related_weakness":["311","319","419","602"],"solutions":"Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.","summary":"An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a \"virtual sale\" of rare items. As other users enter the event, the attacker records via MITM proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script."},{"id":"477","name":"Signature Spoofing by Mixing Signed and Unsigned Content","prerequisites":"Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.","related_weakness":["311","319","693"],"solutions":"Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.","summary":"An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data."},{"id":"65","name":"Sniff Application Code","prerequisites":"The attacker must have the ability to place himself in the communication path between the client and server. The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts. The attacker must be able to employ a sniffer on the network without being detected.","related_weakness":["311","318","319","693","719"],"solutions":"Design: Encrypt all communication between the client and server. Implementation: Use SSL, SSH, SCP. Operation: Use \"ifconfig/ipconfig\" or other tools to detect the sniffer installed in the network.","summary":"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server."},{"id":"158","name":"Sniffing Network Traffic","prerequisites":"The target must be communicating on a network protocol visible by a network sniffing application. The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.","related_weakness":["311"],"solutions":"Obfuscate network traffic through encryption to prevent its readability by network sniffers. Employ appropriate levels of segmentation to your network in accordance with best practices.","summary":"In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."},{"id":"37","name":"Retrieve Embedded Sensitive Data","prerequisites":"In order to feasibly execute this type of attack, some valuable data must be present in client software. Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.","related_weakness":["311","312","314","315","318","525"],"solutions":"","summary":"An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack."},{"id":"387","name":"Navigation Remapping To Propagate Malicious Content","prerequisites":"Targeted software is utilizing application framework APIs","related_weakness":["311","345","346","471","602"],"solutions":"","summary":"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements."},{"id":"157","name":"Sniffing Attacks","prerequisites":"The target data stream must be transmitted on a medium to which the adversary has access.","related_weakness":["311"],"solutions":"Encrypt sensitive information when transmitted on insecure mediums to prevent interception.","summary":"In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Man-In-The-Middle attacks (CAPEC-94), but are entirely passive. MITM attacks are predominantly active and often alter the content of the communications themselves."},{"id":"204","name":"Lifting Sensitive Data Embedded in Cache","prerequisites":"The target application must store sensitive information in a cache. The cache must be inadequately protected against attacker access.","related_weakness":["311","524"],"solutions":"","summary":"An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information."},{"id":"385","name":"Transaction or Event Tampering via Application API Manipulation","prerequisites":"Targeted software is utilizing application framework APIs","related_weakness":["311","345","346","471","602"],"solutions":"","summary":"An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process."},{"id":"384","name":"Application API Message Manipulation via Man-in-the-Middle","prerequisites":"Targeted software is utilizing application framework APIs","related_weakness":["311","345","346","471","602"],"solutions":"","summary":"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Man-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client."},{"id":"386","name":"Application API Navigation Remapping","prerequisites":"Targeted software is utilizing application framework APIs","related_weakness":["311","345","346","471","602"],"solutions":"","summary":"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud."},{"id":"31","name":"Accessing/Intercepting/Modifying HTTP Cookies","prerequisites":"Target server software must be a HTTP daemon that relies on cookies. The cookies must contain sensitive information. The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.","related_weakness":["113","20","302","311","315","384","472","539","565","602","642","724"],"solutions":"Design: Use input validation for cookies Design: Generate and validate MAC for cookies Implementation: Use SSL/TLS to protect cookie in transit Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.","summary":"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information."},{"id":"388","name":"Application API Button Hijacking","prerequisites":"Targeted software is utilizing application framework APIs","related_weakness":["311","345","346","471","602"],"solutions":"","summary":"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination."},{"id":"609","name":"Cellular Traffic Intercept","prerequisites":"None","related_weakness":["311"],"solutions":"Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.","summary":"Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted."}],"cvss":4.3,"cvss-time":"2021-07-21T11:39:00","cvss-vector":"AV:N/AC:M/Au:N/C:P/I:N/A:N","cwe":"CWE-311","id":"CVE-2019-14959","impact":{"availability":"NONE","confidentiality":"PARTIAL","integrity":"NONE"},"last-modified":"2021-07-21T11:39:00","references":["https://blog.jetbrains.com/blog/2019/09/26/jetbrains-security-bulletin-q2-2019/"],"refmap":{"confirm":["https://blog.jetbrains.com/blog/2019/09/26/jetbrains-security-bulletin-q2-2019/"]},"summary":"JetBrains Toolbox before 1.15.5605 was resolving an internal URL via a cleartext http connection.","vulnerable_configuration":[{"id":"cpe:2.3:a:jetbrains:toolbox:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jetbrains:toolbox:1.0:-:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:1.0:-:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jetbrains:toolbox:1.0:beta:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:1.0:beta:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jetbrains:toolbox:1.3:*:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:1.3:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jetbrains:toolbox:1.5:*:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:1.5:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jetbrains:toolbox:1.11:*:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:1.11:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jetbrains:toolbox:1.13:*:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:1.13:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jetbrains:toolbox:1.14:*:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:1.14:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:jetbrains:toolbox:1.15:*:*:*:*:*:*:*","title":"cpe:2.3:a:jetbrains:toolbox:1.15:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:jetbrains:toolbox:-:*:*:*:*:*:*:*","cpe:2.3:a:jetbrains:toolbox:1.0:-:*:*:*:*:*:*","cpe:2.3:a:jetbrains:toolbox:1.0:beta:*:*:*:*:*:*","cpe:2.3:a:jetbrains:toolbox:1.3:*:*:*:*:*:*:*","cpe:2.3:a:jetbrains:toolbox:1.5:*:*:*:*:*:*:*","cpe:2.3:a:jetbrains:toolbox:1.11:*:*:*:*:*:*:*","cpe:2.3:a:jetbrains:toolbox:1.13:*:*:*:*:*:*:*","cpe:2.3:a:jetbrains:toolbox:1.14:*:*:*:*:*:*:*","cpe:2.3:a:jetbrains:toolbox:1.15:*:*:*:*:*:*:*"]}