{"Modified":"2018-08-14T17:44:00","Published":"2018-06-17T12:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[],"cvss":5,"cvss-time":"2018-08-14T17:44:00","cvss-vector":"AV:N/AC:L/Au:N/C:P/I:N/A:N","cwe":"CWE-338","id":"CVE-2018-12454","impact":{"availability":"NONE","confidentiality":"PARTIAL","integrity":"NONE"},"last-modified":"2018-08-14T17:44:00","references":["https://medium.com/@jonghyk.song/attack-on-pseudo-random-number-generator-prng-used-in-1000-guess-an-ethereum-lottery-game-7b76655f953d"],"refmap":{"misc":["https://medium.com/@jonghyk.song/attack-on-pseudo-random-number-generator-prng-used-in-1000-guess-an-ethereum-lottery-game-7b76655f953d"]},"summary":"The _addguess function of a simplelottery smart contract implementation for 1000 Guess, an Ethereum gambling game, generates a random value with publicly readable variables such as the current block information and a private variable (which can be read with a getStorageAt call). Therefore, it allows attackers to always win and get rewards.","vulnerable_configuration":[{"id":"cpe:2.3:a:1000guess:1000_guess:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:1000guess:1000_guess:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:1000guess:1000_guess:-:*:*:*:*:*:*:*"]}