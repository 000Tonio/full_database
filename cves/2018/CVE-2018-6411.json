{"Modified":"2018-06-29T17:43:00","Published":"2018-05-26T22:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"1","name":"Accessing Functionality Not Properly Constrained by ACLs","prerequisites":"The application must be navigable in a manner that associates elements (subsections) of the application with ACLs. The various resources, or individual URLs, must be somehow discoverable by the attacker The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.","related_weakness":["276","285","434","693","721","732"],"solutions":"In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.","summary":"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to."}],"cvss":7.5,"cvss-time":"2018-06-29T17:43:00","cvss-vector":"AV:N/AC:L/Au:N/C:P/I:P/A:P","cwe":"CWE-434","id":"CVE-2018-6411","impact":{"availability":"PARTIAL","confidentiality":"PARTIAL","integrity":"PARTIAL"},"last-modified":"2018-06-29T17:43:00","references":["https://www.machform.com/blog-machform-423-security-release/","https://metalamin.github.io/MachForm-not-0-day-EN/","https://www.exploit-db.com/exploits/44804/"],"refmap":{"exploit-db":["44804"],"misc":["https://metalamin.github.io/MachForm-not-0-day-EN/","https://www.machform.com/blog-machform-423-security-release/"]},"summary":"An issue was discovered in Appnitro MachForm before 4.2.3. When the form is set to filter a blacklist, it automatically adds dangerous extensions to the filters. If the filter is set to a whitelist, the dangerous extensions can be bypassed through ap_form_elements SQL Injection.","vulnerable_configuration":[{"id":"cpe:2.3:a:machform:machform:4.2.3:*:*:*:*:*:*:*","title":"cpe:2.3:a:machform:machform:4.2.3:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:machform:machform:4.2.3:*:*:*:*:*:*:*"]}