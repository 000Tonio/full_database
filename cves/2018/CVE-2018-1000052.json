{"Modified":"2020-08-24T17:37:00","Published":"2018-02-09T23:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"67","name":"String Format Overflow in syslog()","prerequisites":"The format string argument of the Syslog function can be tainted with user supplied data.","related_weakness":["120","134","20","680","697","74"],"solutions":"The following code shows a vulnerable usage of Syslog():\n               syslog(LOG_ERR, cmdBuf);\n                     // the buffer cmdBuff is taking user supplied data.","summary":"This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted."},{"id":"135","name":"Format String Injection","prerequisites":"The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.","related_weakness":["133","134","20","74"],"solutions":"Limit the usage of formatting string functions. Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.","summary":"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack."}],"cvss":5,"cvss-time":"2020-08-24T17:37:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:N/A:P","cwe":"CWE-134","id":"CVE-2018-1000052","impact":{"availability":"PARTIAL","confidentiality":"NONE","integrity":"NONE"},"last-modified":"2020-08-24T17:37:00","references":["https://github.com/fmtlib/fmt/commit/8cf30aa2be256eba07bb1cefb998c52326e846e7","https://github.com/fmtlib/fmt/issues/642"],"refmap":{"confirm":["https://github.com/fmtlib/fmt/commit/8cf30aa2be256eba07bb1cefb998c52326e846e7","https://github.com/fmtlib/fmt/issues/642"]},"summary":"fmtlib version prior to version 4.1.0 (before commit 0555cea5fc0bf890afe0071a558e44625a34ba85) contains a Memory corruption (SIGSEGV), CWE-134 vulnerability in fmt::print() library function that can result in Denial of Service. This attack appear to be exploitable via Specifying an invalid format specifier in the fmt::print() function results in a SIGSEGV (memory corruption, invalid write). This vulnerability appears to have been fixed in after commit 8cf30aa2be256eba07bb1cefb998c52326e846e7.","vulnerable_configuration":[{"id":"cpe:2.3:a:fmt:fmt:0.8.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:0.8.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:0.9.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:0.9.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:0.10.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:0.10.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:0.11.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:0.11.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:0.12.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:0.12.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:1.0.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:1.0.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:1.1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:1.1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:2.0.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:2.0.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:2.0.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:2.0.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:2.1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:2.1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:2.1.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:2.1.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:3.0.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:3.0.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:3.0.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:3.0.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:3.0.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:3.0.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:fmt:fmt:4.0.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:fmt:fmt:4.0.0:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:fmt:fmt:0.8.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:0.9.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:0.10.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:0.11.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:0.12.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:1.0.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:1.1.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:2.0.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:2.0.1:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:2.1.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:2.1.1:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:3.0.0:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:3.0.1:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:3.0.2:*:*:*:*:*:*:*","cpe:2.3:a:fmt:fmt:4.0.0:*:*:*:*:*:*:*"]}