{"Modified":"2020-08-24T17:37:00","Published":"2018-08-15T17:29:00","access":{"authentication":"NONE","complexity":"MEDIUM","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"263","name":"Force Use of Corrupted Files","prerequisites":"The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup. The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.","related_weakness":["829"],"solutions":"","summary":"This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible."},{"id":"175","name":"Code Inclusion","prerequisites":"The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included. The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include.","related_weakness":["829"],"solutions":"","summary":"An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application."},{"id":"228","name":"DTD Injection","prerequisites":"The target must be running an XML based application that leverages DTDs.","related_weakness":["829"],"solutions":"Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion. Implementation: Disallow the inclusion of DTDs as part of incoming messages. Implementation: Use XML parsing tools that protect against DTD attacks.","summary":"An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion."},{"id":"252","name":"PHP Local File Inclusion","prerequisites":"The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.","related_weakness":["829"],"solutions":"","summary":"The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways."},{"id":"251","name":"Local Code Inclusion","prerequisites":"The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture. Some variants of this attack may require that old versions of some code files be present and in predictable locations.","related_weakness":["829"],"solutions":"Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement specific, white-list approach.","summary":"The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways."},{"id":"549","name":"Local Execution of Code","prerequisites":"Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system.","related_weakness":["829"],"solutions":"Employ robust cybersecurity training for all employees. Implement system antivirus software that scans all attachments before opening them. Regularly patch all software. Execute all suspicious files in a sandbox environment.","summary":"An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others."},{"id":"253","name":"Remote Code Inclusion","prerequisites":"Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously.","related_weakness":["829"],"solutions":"Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.","summary":"The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways."},{"id":"201","name":"XML Entity Linking","prerequisites":"The target must follow external entity references without validating the validity of the reference target.","related_weakness":["829"],"solutions":"Configure the XML processor to only retrieve external entities from trusted sources.","summary":"An attacker creates an XML document that contains an external entity reference. External entity references can take the form of <!ENTITY name system \"uri\"> tags in a DTD. Because processors may not validate documents with external entities, there may be no checks on the nature of the reference in the external entity. This can allow an attacker to open arbitrary files or connections."}],"cvss":4.3,"cvss-time":"2020-08-24T17:37:00","cvss-vector":"AV:N/AC:M/Au:N/C:P/I:N/A:N","cwe":"CWE-829","id":"CVE-2018-8351","impact":{"availability":"NONE","confidentiality":"PARTIAL","integrity":"NONE"},"last-modified":"2020-08-24T17:37:00","references":["http://www.securityfocus.com/bid/105015","http://www.securitytracker.com/id/1041457","https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8351"],"refmap":{"bid":["105015"],"confirm":["https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8351"],"sectrack":["1041457"]},"summary":"An information disclosure vulnerability exists when affected Microsoft browsers improperly allow cross-frame interaction, aka \"Microsoft Browser Information Disclosure Vulnerability.\" This affects Internet Explorer 11, Microsoft Edge, Internet Explorer 10.","vulnerable_configuration":[{"id":"cpe:2.3:a:microsoft:internet_explorer:11:*:*:*:*:*:*:*","title":"cpe:2.3:a:microsoft:internet_explorer:11:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_10:1607:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_10:1607:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_10:1703:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_10:1703:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_10:1709:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_10:1709:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_10:1803:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_10:1803:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_7:*:sp1:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_7:*:sp1:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_8.1:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_8.1:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_rt_8.1:*:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_rt_8.1:*:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_server_2008:r2:sp1:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_server_2008:r2:sp1:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_server_2012:r2:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_server_2012:r2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_server_2016:-:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_server_2016:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:microsoft:edge:-:*:*:*:*:*:*:*","title":"cpe:2.3:a:microsoft:edge:-:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:microsoft:internet_explorer:10:*:*:*:*:*:*:*","title":"cpe:2.3:a:microsoft:internet_explorer:10:*:*:*:*:*:*:*"},{"id":"cpe:2.3:o:microsoft:windows_server_2012:-:*:*:*:*:*:*:*","title":"cpe:2.3:o:microsoft:windows_server_2012:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:microsoft:internet_explorer:11:*:*:*:*:*:*:*","cpe:2.3:a:microsoft:edge:-:*:*:*:*:*:*:*","cpe:2.3:a:microsoft:internet_explorer:10:*:*:*:*:*:*:*"]}