{"Modified":"2019-10-02T20:15:00","Published":"2019-02-13T14:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"6","name":"Argument Injection","prerequisites":"Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions. Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.","related_weakness":["146","184","185","697","713","74","78"],"solutions":"Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process. Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred. Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.","summary":"An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods."},{"id":"79","name":"Using Slashes in Alternate Encoding","prerequisites":"The application server accepts paths to locate resources. The application server does insufficient input data validation on the resource path requested by the user. The access right to resources are not set properly.","related_weakness":["171","173","180","181","185","20","200","21","22","697","707","73","74"],"solutions":"Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL. When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx) Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section) Test your path decoding process against malicious input. In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.","summary":"This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other."},{"id":"15","name":"Command Delimiters","prerequisites":"Software's input validation or filtering must not detect and block presence of additional malicious command.","related_weakness":["138","140","146","154","157","184","185","697","713","77","78","93"],"solutions":"Design: Perform whitelist validation against a positive specification for command length, type, and parameters. Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account Implementation: Perform input validation for all remote content. Implementation: Use type conversions such as JDBC prepared statements.","summary":"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."}],"cvss":5,"cvss-time":"2019-10-02T20:15:00","cvss-vector":"AV:N/AC:L/Au:N/C:N/I:N/A:P","cwe":"CWE-185","id":"CVE-2018-20164","impact":{"availability":"PARTIAL","confidentiality":"NONE","integrity":"NONE"},"last-modified":"2019-10-02T20:15:00","references":["https://github.com/ua-parser/uap-core/commit/010ccdc7303546cd22b9da687c29f4a996990014","https://github.com/ua-parser/uap-core/commit/156f7e12b215bddbaf3df4514c399d683e6cdadc","https://github.com/ua-parser/uap-core/issues/332","https://www.x41-dsec.de/lab/advisories/x41-2018-009-uaparser/"],"refmap":{"misc":["https://github.com/ua-parser/uap-core/commit/010ccdc7303546cd22b9da687c29f4a996990014","https://github.com/ua-parser/uap-core/commit/156f7e12b215bddbaf3df4514c399d683e6cdadc","https://github.com/ua-parser/uap-core/issues/332","https://www.x41-dsec.de/lab/advisories/x41-2018-009-uaparser/"]},"summary":"An issue was discovered in regex.yaml (aka regexes.yaml) in UA-Parser UAP-Core before 0.6.0. A Regular Expression Denial of Service (ReDoS) issue allows remote attackers to overload a server by setting the User-Agent header in an HTTP(S) request to a value containing a long digit string. (The UAP-Core project contains the vulnerability, propagating to all implementations.)","vulnerable_configuration":[{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.1.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.1.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.1.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.1.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.1.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.1.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.3:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.3:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.4:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.2.4:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.3.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.3.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.3.1:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.3.1:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.3.2:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.3.2:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.3.4:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.3.4:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.4.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.4.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:uaparser:user_agent_parser-core:0.5.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:uaparser:user_agent_parser-core:0.5.0:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:uaparser:user_agent_parser-core:0.1.0:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.1.1:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.1.2:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.2.0:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.2.1:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.2.2:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.2.3:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.2.4:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.3.0:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.3.1:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.3.2:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.3.4:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.4.0:*:*:*:*:*:*:*","cpe:2.3:a:uaparser:user_agent_parser-core:0.5.0:*:*:*:*:*:*:*"]}