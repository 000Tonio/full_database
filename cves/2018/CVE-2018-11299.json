{"Modified":"2019-04-05T07:29:00","Published":"2018-09-18T18:29:00","access":{"authentication":"NONE","complexity":"LOW","vector":"LOCAL"},"assigner":"cve@mitre.org","capec":[{"id":"100","name":"Overflow Buffers","prerequisites":"Targeted software performs buffer operations. Targeted software inadequately performs bounds-checking on buffer operations. Adversary has the capability to influence the input to buffer operations.","related_weakness":["119","120","129","131","19","680","805"],"solutions":"Use a language or compiler that performs automatic bounds checking. Use secure functions not vulnerable to buffer overflow. If you have to use dangerous functions, make sure that you do boundary checking. Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. Use OS-level preventative functionality. Not a complete solution. Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.","summary":"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice."}],"cvss":7.2,"cvss-time":"2019-04-05T07:29:00","cvss-vector":"AV:L/AC:L/Au:N/C:C/I:C/A:C","cwe":"CWE-129","id":"CVE-2018-11299","impact":{"availability":"COMPLETE","confidentiality":"COMPLETE","integrity":"COMPLETE"},"last-modified":"2019-04-05T07:29:00","references":["http://www.securityfocus.com/bid/107770","https://source.codeaurora.org/quic/la/platform/vendor/qcom-opensource/wlan/qcacld-3.0/commit/?id=409d269c3464a84d9274bc0831031b2216b1060","https://www.codeaurora.org/security-bulletin/2018/09/04/september-2018-code-aurora-security-bulletin"],"refmap":{"bid":["107770"],"confirm":["https://source.codeaurora.org/quic/la/platform/vendor/qcom-opensource/wlan/qcacld-3.0/commit/?id=409d269c3464a84d9274bc0831031b2216b1060","https://www.codeaurora.org/security-bulletin/2018/09/04/september-2018-code-aurora-security-bulletin"]},"summary":"In all android releases (Android for MSM, Firefox OS for MSM, QRD Android) from CAF using the linux kernel, when WLAN FW has not filled the vdev id correctly in stats events then WLAN host driver tries to access interface array without proper bound check which can lead to invalid memory access and as a side effect kernel panic or page fault.","vulnerable_configuration":[{"id":"cpe:2.3:o:google:android:-:*:*:*:*:*:*:*","title":"cpe:2.3:o:google:android:-:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:o:google:android:-:*:*:*:*:*:*:*"]}