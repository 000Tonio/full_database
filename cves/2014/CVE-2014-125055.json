{"Modified":"2023-01-12T16:52:00","Published":"2023-01-07T09:15:00","access":{},"assigner":"cna@vuldb.com","capec":[{"id":"462","name":"Cross-Domain Search Timing","prerequisites":"Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection","related_weakness":["208","352","385"],"solutions":"Design: The browser's security model could be fixed to not leak timing information for cross domain requests","summary":"An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain. For GET requests an attacker could for instance leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events. For the POST requests, an attacker could leverage the \"iframe\" element and leverage the \"onload()\" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers' cross domain requests. The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information."}],"cvss":null,"cwe":"CWE-208","id":"CVE-2014-125055","impact":{},"last-modified":"2023-01-12T16:52:00","references":["https://github.com/agnivade/easy-scrypt/releases/tag/v1.0.0","https://github.com/agnivade/easy-scrypt/commit/477c10cf3b144ddf96526aa09f5fdea613f21812","https://vuldb.com/?ctiid.217596","https://vuldb.com/?id.217596"],"summary":"A vulnerability, which was classified as problematic, was found in agnivade easy-scrypt. Affected is the function VerifyPassphrase of the file scrypt.go. The manipulation leads to observable timing discrepancy. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is 477c10cf3b144ddf96526aa09f5fdea613f21812. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217596.","vulnerable_configuration":[{"id":"cpe:2.3:a:easy-script_project:easy-script:*:*:*:*:*:*:*:*","title":"cpe:2.3:a:easy-script_project:easy-script:*:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:easy-script_project:easy-script:*:*:*:*:*:*:*:*"]}