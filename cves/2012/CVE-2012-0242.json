{"Modified":"2018-01-05T02:29:00","Published":"2012-02-21T13:31:00","access":{"authentication":"NONE","complexity":"LOW","vector":"NETWORK"},"assigner":"cve@mitre.org","capec":[{"id":"67","name":"String Format Overflow in syslog()","prerequisites":"The format string argument of the Syslog function can be tainted with user supplied data.","related_weakness":["120","134","20","680","697","74"],"solutions":"The following code shows a vulnerable usage of Syslog():\n               syslog(LOG_ERR, cmdBuf);\n                     // the buffer cmdBuff is taking user supplied data.","summary":"This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted."},{"id":"135","name":"Format String Injection","prerequisites":"The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.","related_weakness":["133","134","20","74"],"solutions":"Limit the usage of formatting string functions. Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.","summary":"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack."}],"cvss":10,"cvss-time":"2018-01-05T02:29:00","cvss-vector":"AV:N/AC:L/Au:N/C:C/I:C/A:C","cwe":"CWE-134","id":"CVE-2012-0242","impact":{"availability":"COMPLETE","confidentiality":"COMPLETE","integrity":"COMPLETE"},"last-modified":"2018-01-05T02:29:00","references":["http://www.securityfocus.com/bid/52051","http://www.us-cert.gov/control_systems/pdf/ICSA-12-047-01.pdf"],"refmap":{"bid":["52051"],"misc":["http://www.us-cert.gov/control_systems/pdf/ICSA-12-047-01.pdf"]},"summary":"Format string vulnerability in Advantech/BroadWin WebAccess before 7.0 allows remote attackers to execute arbitrary code via format string specifiers in a message string.","vulnerable_configuration":[{"id":"cpe:2.3:a:advantech:advantech_webaccess:5.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:advantech:advantech_webaccess:5.0:*:*:*:*:*:*:*"},{"id":"cpe:2.3:a:advantech:advantech_webaccess:6.0:*:*:*:*:*:*:*","title":"cpe:2.3:a:advantech:advantech_webaccess:6.0:*:*:*:*:*:*:*"}],"vulnerable_configuration_cpe_2_2":[],"vulnerable_product":["cpe:2.3:a:advantech:advantech_webaccess:5.0:*:*:*:*:*:*:*","cpe:2.3:a:advantech:advantech_webaccess:6.0:*:*:*:*:*:*:*"]}